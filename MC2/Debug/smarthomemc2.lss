
smarthomemc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d62  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00000d62  00000dd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000dec  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000914  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000102  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010cf  00000000  00000000  000027aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cc  00000000  00000000  00003879  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000899  00000000  00000000  00004245  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00004ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000244  00000000  00000000  00004ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000468  00000000  00000000  00004de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_9>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 8b 04 	call	0x916	; 0x916 <main>
  7a:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__divsf3>:
  82:	a8 e1       	ldi	r26, 0x18	; 24
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e4       	ldi	r30, 0x47	; 71
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__prologue_saves__+0x10>
  8e:	69 83       	std	Y+1, r22	; 0x01
  90:	7a 83       	std	Y+2, r23	; 0x02
  92:	8b 83       	std	Y+3, r24	; 0x03
  94:	9c 83       	std	Y+4, r25	; 0x04
  96:	2d 83       	std	Y+5, r18	; 0x05
  98:	3e 83       	std	Y+6, r19	; 0x06
  9a:	4f 83       	std	Y+7, r20	; 0x07
  9c:	58 87       	std	Y+8, r21	; 0x08
  9e:	b9 e0       	ldi	r27, 0x09	; 9
  a0:	eb 2e       	mov	r14, r27
  a2:	f1 2c       	mov	r15, r1
  a4:	ec 0e       	add	r14, r28
  a6:	fd 1e       	adc	r15, r29
  a8:	ce 01       	movw	r24, r28
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	b7 01       	movw	r22, r14
  ae:	0e 94 c3 02 	call	0x586	; 0x586 <__unpack_f>
  b2:	8e 01       	movw	r16, r28
  b4:	0f 5e       	subi	r16, 0xEF	; 239
  b6:	1f 4f       	sbci	r17, 0xFF	; 255
  b8:	ce 01       	movw	r24, r28
  ba:	05 96       	adiw	r24, 0x05	; 5
  bc:	b8 01       	movw	r22, r16
  be:	0e 94 c3 02 	call	0x586	; 0x586 <__unpack_f>
  c2:	29 85       	ldd	r18, Y+9	; 0x09
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	08 f4       	brcc	.+2      	; 0xca <__divsf3+0x48>
  c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__divsf3+0x144>
  ca:	39 89       	ldd	r19, Y+17	; 0x11
  cc:	32 30       	cpi	r19, 0x02	; 2
  ce:	10 f4       	brcc	.+4      	; 0xd4 <__divsf3+0x52>
  d0:	b8 01       	movw	r22, r16
  d2:	7c c0       	rjmp	.+248    	; 0x1cc <__divsf3+0x14a>
  d4:	8a 85       	ldd	r24, Y+10	; 0x0a
  d6:	9a 89       	ldd	r25, Y+18	; 0x12
  d8:	89 27       	eor	r24, r25
  da:	8a 87       	std	Y+10, r24	; 0x0a
  dc:	24 30       	cpi	r18, 0x04	; 4
  de:	11 f0       	breq	.+4      	; 0xe4 <__divsf3+0x62>
  e0:	22 30       	cpi	r18, 0x02	; 2
  e2:	31 f4       	brne	.+12     	; 0xf0 <__divsf3+0x6e>
  e4:	23 17       	cp	r18, r19
  e6:	09 f0       	breq	.+2      	; 0xea <__divsf3+0x68>
  e8:	6e c0       	rjmp	.+220    	; 0x1c6 <__divsf3+0x144>
  ea:	60 e6       	ldi	r22, 0x60	; 96
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	6e c0       	rjmp	.+220    	; 0x1cc <__divsf3+0x14a>
  f0:	34 30       	cpi	r19, 0x04	; 4
  f2:	39 f4       	brne	.+14     	; 0x102 <__divsf3+0x80>
  f4:	1d 86       	std	Y+13, r1	; 0x0d
  f6:	1e 86       	std	Y+14, r1	; 0x0e
  f8:	1f 86       	std	Y+15, r1	; 0x0f
  fa:	18 8a       	std	Y+16, r1	; 0x10
  fc:	1c 86       	std	Y+12, r1	; 0x0c
  fe:	1b 86       	std	Y+11, r1	; 0x0b
 100:	04 c0       	rjmp	.+8      	; 0x10a <__divsf3+0x88>
 102:	32 30       	cpi	r19, 0x02	; 2
 104:	21 f4       	brne	.+8      	; 0x10e <__divsf3+0x8c>
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	89 87       	std	Y+9, r24	; 0x09
 10a:	b7 01       	movw	r22, r14
 10c:	5f c0       	rjmp	.+190    	; 0x1cc <__divsf3+0x14a>
 10e:	2b 85       	ldd	r18, Y+11	; 0x0b
 110:	3c 85       	ldd	r19, Y+12	; 0x0c
 112:	8b 89       	ldd	r24, Y+19	; 0x13
 114:	9c 89       	ldd	r25, Y+20	; 0x14
 116:	28 1b       	sub	r18, r24
 118:	39 0b       	sbc	r19, r25
 11a:	3c 87       	std	Y+12, r19	; 0x0c
 11c:	2b 87       	std	Y+11, r18	; 0x0b
 11e:	ed 84       	ldd	r14, Y+13	; 0x0d
 120:	fe 84       	ldd	r15, Y+14	; 0x0e
 122:	0f 85       	ldd	r16, Y+15	; 0x0f
 124:	18 89       	ldd	r17, Y+16	; 0x10
 126:	ad 88       	ldd	r10, Y+21	; 0x15
 128:	be 88       	ldd	r11, Y+22	; 0x16
 12a:	cf 88       	ldd	r12, Y+23	; 0x17
 12c:	d8 8c       	ldd	r13, Y+24	; 0x18
 12e:	ea 14       	cp	r14, r10
 130:	fb 04       	cpc	r15, r11
 132:	0c 05       	cpc	r16, r12
 134:	1d 05       	cpc	r17, r13
 136:	40 f4       	brcc	.+16     	; 0x148 <__divsf3+0xc6>
 138:	ee 0c       	add	r14, r14
 13a:	ff 1c       	adc	r15, r15
 13c:	00 1f       	adc	r16, r16
 13e:	11 1f       	adc	r17, r17
 140:	21 50       	subi	r18, 0x01	; 1
 142:	30 40       	sbci	r19, 0x00	; 0
 144:	3c 87       	std	Y+12, r19	; 0x0c
 146:	2b 87       	std	Y+11, r18	; 0x0b
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b0 e4       	ldi	r27, 0x40	; 64
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	ea 14       	cp	r14, r10
 15e:	fb 04       	cpc	r15, r11
 160:	0c 05       	cpc	r16, r12
 162:	1d 05       	cpc	r17, r13
 164:	40 f0       	brcs	.+16     	; 0x176 <__divsf3+0xf4>
 166:	28 2b       	or	r18, r24
 168:	39 2b       	or	r19, r25
 16a:	4a 2b       	or	r20, r26
 16c:	5b 2b       	or	r21, r27
 16e:	ea 18       	sub	r14, r10
 170:	fb 08       	sbc	r15, r11
 172:	0c 09       	sbc	r16, r12
 174:	1d 09       	sbc	r17, r13
 176:	b6 95       	lsr	r27
 178:	a7 95       	ror	r26
 17a:	97 95       	ror	r25
 17c:	87 95       	ror	r24
 17e:	ee 0c       	add	r14, r14
 180:	ff 1c       	adc	r15, r15
 182:	00 1f       	adc	r16, r16
 184:	11 1f       	adc	r17, r17
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	6f 31       	cpi	r22, 0x1F	; 31
 18c:	71 05       	cpc	r23, r1
 18e:	31 f7       	brne	.-52     	; 0x15c <__divsf3+0xda>
 190:	da 01       	movw	r26, r20
 192:	c9 01       	movw	r24, r18
 194:	8f 77       	andi	r24, 0x7F	; 127
 196:	90 70       	andi	r25, 0x00	; 0
 198:	a0 70       	andi	r26, 0x00	; 0
 19a:	b0 70       	andi	r27, 0x00	; 0
 19c:	80 34       	cpi	r24, 0x40	; 64
 19e:	91 05       	cpc	r25, r1
 1a0:	a1 05       	cpc	r26, r1
 1a2:	b1 05       	cpc	r27, r1
 1a4:	61 f4       	brne	.+24     	; 0x1be <__divsf3+0x13c>
 1a6:	27 fd       	sbrc	r18, 7
 1a8:	0a c0       	rjmp	.+20     	; 0x1be <__divsf3+0x13c>
 1aa:	e1 14       	cp	r14, r1
 1ac:	f1 04       	cpc	r15, r1
 1ae:	01 05       	cpc	r16, r1
 1b0:	11 05       	cpc	r17, r1
 1b2:	29 f0       	breq	.+10     	; 0x1be <__divsf3+0x13c>
 1b4:	20 5c       	subi	r18, 0xC0	; 192
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	4f 4f       	sbci	r20, 0xFF	; 255
 1ba:	5f 4f       	sbci	r21, 0xFF	; 255
 1bc:	20 78       	andi	r18, 0x80	; 128
 1be:	2d 87       	std	Y+13, r18	; 0x0d
 1c0:	3e 87       	std	Y+14, r19	; 0x0e
 1c2:	4f 87       	std	Y+15, r20	; 0x0f
 1c4:	58 8b       	std	Y+16, r21	; 0x10
 1c6:	be 01       	movw	r22, r28
 1c8:	67 5f       	subi	r22, 0xF7	; 247
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	cb 01       	movw	r24, r22
 1ce:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__pack_f>
 1d2:	68 96       	adiw	r28, 0x18	; 24
 1d4:	ea e0       	ldi	r30, 0x0A	; 10
 1d6:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__epilogue_restores__+0x10>

000001da <__floatsisf>:
 1da:	a8 e0       	ldi	r26, 0x08	; 8
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	e3 ef       	ldi	r30, 0xF3	; 243
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__prologue_saves__+0x12>
 1e6:	9b 01       	movw	r18, r22
 1e8:	ac 01       	movw	r20, r24
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	da 01       	movw	r26, r20
 1f0:	c9 01       	movw	r24, r18
 1f2:	88 27       	eor	r24, r24
 1f4:	b7 fd       	sbrc	r27, 7
 1f6:	83 95       	inc	r24
 1f8:	99 27       	eor	r25, r25
 1fa:	aa 27       	eor	r26, r26
 1fc:	bb 27       	eor	r27, r27
 1fe:	b8 2e       	mov	r11, r24
 200:	21 15       	cp	r18, r1
 202:	31 05       	cpc	r19, r1
 204:	41 05       	cpc	r20, r1
 206:	51 05       	cpc	r21, r1
 208:	19 f4       	brne	.+6      	; 0x210 <__floatsisf+0x36>
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	89 83       	std	Y+1, r24	; 0x01
 20e:	3a c0       	rjmp	.+116    	; 0x284 <__floatsisf+0xaa>
 210:	88 23       	and	r24, r24
 212:	a9 f0       	breq	.+42     	; 0x23e <__floatsisf+0x64>
 214:	20 30       	cpi	r18, 0x00	; 0
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	38 07       	cpc	r19, r24
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	48 07       	cpc	r20, r24
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	58 07       	cpc	r21, r24
 222:	29 f4       	brne	.+10     	; 0x22e <__floatsisf+0x54>
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	9f ec       	ldi	r25, 0xCF	; 207
 22c:	30 c0       	rjmp	.+96     	; 0x28e <__floatsisf+0xb4>
 22e:	ee 24       	eor	r14, r14
 230:	ff 24       	eor	r15, r15
 232:	87 01       	movw	r16, r14
 234:	e2 1a       	sub	r14, r18
 236:	f3 0a       	sbc	r15, r19
 238:	04 0b       	sbc	r16, r20
 23a:	15 0b       	sbc	r17, r21
 23c:	02 c0       	rjmp	.+4      	; 0x242 <__floatsisf+0x68>
 23e:	79 01       	movw	r14, r18
 240:	8a 01       	movw	r16, r20
 242:	8e e1       	ldi	r24, 0x1E	; 30
 244:	c8 2e       	mov	r12, r24
 246:	d1 2c       	mov	r13, r1
 248:	dc 82       	std	Y+4, r13	; 0x04
 24a:	cb 82       	std	Y+3, r12	; 0x03
 24c:	ed 82       	std	Y+5, r14	; 0x05
 24e:	fe 82       	std	Y+6, r15	; 0x06
 250:	0f 83       	std	Y+7, r16	; 0x07
 252:	18 87       	std	Y+8, r17	; 0x08
 254:	c8 01       	movw	r24, r16
 256:	b7 01       	movw	r22, r14
 258:	0e 94 9f 01 	call	0x33e	; 0x33e <__clzsi2>
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	18 16       	cp	r1, r24
 260:	19 06       	cpc	r1, r25
 262:	84 f4       	brge	.+32     	; 0x284 <__floatsisf+0xaa>
 264:	08 2e       	mov	r0, r24
 266:	04 c0       	rjmp	.+8      	; 0x270 <__floatsisf+0x96>
 268:	ee 0c       	add	r14, r14
 26a:	ff 1c       	adc	r15, r15
 26c:	00 1f       	adc	r16, r16
 26e:	11 1f       	adc	r17, r17
 270:	0a 94       	dec	r0
 272:	d2 f7       	brpl	.-12     	; 0x268 <__floatsisf+0x8e>
 274:	ed 82       	std	Y+5, r14	; 0x05
 276:	fe 82       	std	Y+6, r15	; 0x06
 278:	0f 83       	std	Y+7, r16	; 0x07
 27a:	18 87       	std	Y+8, r17	; 0x08
 27c:	c8 1a       	sub	r12, r24
 27e:	d9 0a       	sbc	r13, r25
 280:	dc 82       	std	Y+4, r13	; 0x04
 282:	cb 82       	std	Y+3, r12	; 0x03
 284:	ba 82       	std	Y+2, r11	; 0x02
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__pack_f>
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	e9 e0       	ldi	r30, 0x09	; 9
 292:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__epilogue_restores__+0x12>

00000296 <__fixsfsi>:
 296:	ac e0       	ldi	r26, 0x0C	; 12
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e1 e5       	ldi	r30, 0x51	; 81
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__prologue_saves__+0x20>
 2a2:	69 83       	std	Y+1, r22	; 0x01
 2a4:	7a 83       	std	Y+2, r23	; 0x02
 2a6:	8b 83       	std	Y+3, r24	; 0x03
 2a8:	9c 83       	std	Y+4, r25	; 0x04
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	be 01       	movw	r22, r28
 2b0:	6b 5f       	subi	r22, 0xFB	; 251
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255
 2b4:	0e 94 c3 02 	call	0x586	; 0x586 <__unpack_f>
 2b8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	61 f1       	breq	.+88     	; 0x316 <__fixsfsi+0x80>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	50 f1       	brcs	.+84     	; 0x316 <__fixsfsi+0x80>
 2c2:	84 30       	cpi	r24, 0x04	; 4
 2c4:	21 f4       	brne	.+8      	; 0x2ce <__fixsfsi+0x38>
 2c6:	8e 81       	ldd	r24, Y+6	; 0x06
 2c8:	88 23       	and	r24, r24
 2ca:	51 f1       	breq	.+84     	; 0x320 <__fixsfsi+0x8a>
 2cc:	2e c0       	rjmp	.+92     	; 0x32a <__fixsfsi+0x94>
 2ce:	2f 81       	ldd	r18, Y+7	; 0x07
 2d0:	38 85       	ldd	r19, Y+8	; 0x08
 2d2:	37 fd       	sbrc	r19, 7
 2d4:	20 c0       	rjmp	.+64     	; 0x316 <__fixsfsi+0x80>
 2d6:	6e 81       	ldd	r22, Y+6	; 0x06
 2d8:	2f 31       	cpi	r18, 0x1F	; 31
 2da:	31 05       	cpc	r19, r1
 2dc:	1c f0       	brlt	.+6      	; 0x2e4 <__fixsfsi+0x4e>
 2de:	66 23       	and	r22, r22
 2e0:	f9 f0       	breq	.+62     	; 0x320 <__fixsfsi+0x8a>
 2e2:	23 c0       	rjmp	.+70     	; 0x32a <__fixsfsi+0x94>
 2e4:	8e e1       	ldi	r24, 0x1E	; 30
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	82 1b       	sub	r24, r18
 2ea:	93 0b       	sbc	r25, r19
 2ec:	29 85       	ldd	r18, Y+9	; 0x09
 2ee:	3a 85       	ldd	r19, Y+10	; 0x0a
 2f0:	4b 85       	ldd	r20, Y+11	; 0x0b
 2f2:	5c 85       	ldd	r21, Y+12	; 0x0c
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__fixsfsi+0x68>
 2f6:	56 95       	lsr	r21
 2f8:	47 95       	ror	r20
 2fa:	37 95       	ror	r19
 2fc:	27 95       	ror	r18
 2fe:	8a 95       	dec	r24
 300:	d2 f7       	brpl	.-12     	; 0x2f6 <__fixsfsi+0x60>
 302:	66 23       	and	r22, r22
 304:	b1 f0       	breq	.+44     	; 0x332 <__fixsfsi+0x9c>
 306:	50 95       	com	r21
 308:	40 95       	com	r20
 30a:	30 95       	com	r19
 30c:	21 95       	neg	r18
 30e:	3f 4f       	sbci	r19, 0xFF	; 255
 310:	4f 4f       	sbci	r20, 0xFF	; 255
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	0e c0       	rjmp	.+28     	; 0x332 <__fixsfsi+0x9c>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	09 c0       	rjmp	.+18     	; 0x332 <__fixsfsi+0x9c>
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	3f ef       	ldi	r19, 0xFF	; 255
 324:	4f ef       	ldi	r20, 0xFF	; 255
 326:	5f e7       	ldi	r21, 0x7F	; 127
 328:	04 c0       	rjmp	.+8      	; 0x332 <__fixsfsi+0x9c>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	50 e8       	ldi	r21, 0x80	; 128
 332:	b9 01       	movw	r22, r18
 334:	ca 01       	movw	r24, r20
 336:	2c 96       	adiw	r28, 0x0c	; 12
 338:	e2 e0       	ldi	r30, 0x02	; 2
 33a:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__epilogue_restores__+0x20>

0000033e <__clzsi2>:
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	7b 01       	movw	r14, r22
 348:	8c 01       	movw	r16, r24
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	e8 16       	cp	r14, r24
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	f8 06       	cpc	r15, r24
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	08 07       	cpc	r16, r24
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	18 07       	cpc	r17, r24
 35a:	88 f4       	brcc	.+34     	; 0x37e <__clzsi2+0x40>
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	e8 16       	cp	r14, r24
 360:	f1 04       	cpc	r15, r1
 362:	01 05       	cpc	r16, r1
 364:	11 05       	cpc	r17, r1
 366:	31 f0       	breq	.+12     	; 0x374 <__clzsi2+0x36>
 368:	28 f0       	brcs	.+10     	; 0x374 <__clzsi2+0x36>
 36a:	88 e0       	ldi	r24, 0x08	; 8
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	a0 e0       	ldi	r26, 0x00	; 0
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	17 c0       	rjmp	.+46     	; 0x3a2 <__clzsi2+0x64>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	a0 e0       	ldi	r26, 0x00	; 0
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	12 c0       	rjmp	.+36     	; 0x3a2 <__clzsi2+0x64>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	e8 16       	cp	r14, r24
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	f8 06       	cpc	r15, r24
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 07       	cpc	r16, r24
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	18 07       	cpc	r17, r24
 38e:	28 f0       	brcs	.+10     	; 0x39a <__clzsi2+0x5c>
 390:	88 e1       	ldi	r24, 0x18	; 24
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	a0 e0       	ldi	r26, 0x00	; 0
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <__clzsi2+0x64>
 39a:	80 e1       	ldi	r24, 0x10	; 16
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	a0 e0       	ldi	r26, 0x00	; 0
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	20 e2       	ldi	r18, 0x20	; 32
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	28 1b       	sub	r18, r24
 3ac:	39 0b       	sbc	r19, r25
 3ae:	4a 0b       	sbc	r20, r26
 3b0:	5b 0b       	sbc	r21, r27
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <__clzsi2+0x7e>
 3b4:	16 95       	lsr	r17
 3b6:	07 95       	ror	r16
 3b8:	f7 94       	ror	r15
 3ba:	e7 94       	ror	r14
 3bc:	8a 95       	dec	r24
 3be:	d2 f7       	brpl	.-12     	; 0x3b4 <__clzsi2+0x76>
 3c0:	f7 01       	movw	r30, r14
 3c2:	e8 59       	subi	r30, 0x98	; 152
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	80 81       	ld	r24, Z
 3c8:	28 1b       	sub	r18, r24
 3ca:	31 09       	sbc	r19, r1
 3cc:	41 09       	sbc	r20, r1
 3ce:	51 09       	sbc	r21, r1
 3d0:	c9 01       	movw	r24, r18
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	ff 90       	pop	r15
 3d8:	ef 90       	pop	r14
 3da:	08 95       	ret

000003dc <__pack_f>:
 3dc:	df 92       	push	r13
 3de:	ef 92       	push	r14
 3e0:	ff 92       	push	r15
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	fc 01       	movw	r30, r24
 3e8:	e4 80       	ldd	r14, Z+4	; 0x04
 3ea:	f5 80       	ldd	r15, Z+5	; 0x05
 3ec:	06 81       	ldd	r16, Z+6	; 0x06
 3ee:	17 81       	ldd	r17, Z+7	; 0x07
 3f0:	d1 80       	ldd	r13, Z+1	; 0x01
 3f2:	80 81       	ld	r24, Z
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	48 f4       	brcc	.+18     	; 0x40a <__pack_f+0x2e>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	a0 e1       	ldi	r26, 0x10	; 16
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	e8 2a       	or	r14, r24
 402:	f9 2a       	or	r15, r25
 404:	0a 2b       	or	r16, r26
 406:	1b 2b       	or	r17, r27
 408:	a5 c0       	rjmp	.+330    	; 0x554 <__stack+0xf5>
 40a:	84 30       	cpi	r24, 0x04	; 4
 40c:	09 f4       	brne	.+2      	; 0x410 <__pack_f+0x34>
 40e:	9f c0       	rjmp	.+318    	; 0x54e <__stack+0xef>
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	21 f4       	brne	.+8      	; 0x41c <__pack_f+0x40>
 414:	ee 24       	eor	r14, r14
 416:	ff 24       	eor	r15, r15
 418:	87 01       	movw	r16, r14
 41a:	05 c0       	rjmp	.+10     	; 0x426 <__pack_f+0x4a>
 41c:	e1 14       	cp	r14, r1
 41e:	f1 04       	cpc	r15, r1
 420:	01 05       	cpc	r16, r1
 422:	11 05       	cpc	r17, r1
 424:	19 f4       	brne	.+6      	; 0x42c <__pack_f+0x50>
 426:	e0 e0       	ldi	r30, 0x00	; 0
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	96 c0       	rjmp	.+300    	; 0x558 <__stack+0xf9>
 42c:	62 81       	ldd	r22, Z+2	; 0x02
 42e:	73 81       	ldd	r23, Z+3	; 0x03
 430:	9f ef       	ldi	r25, 0xFF	; 255
 432:	62 38       	cpi	r22, 0x82	; 130
 434:	79 07       	cpc	r23, r25
 436:	0c f0       	brlt	.+2      	; 0x43a <__pack_f+0x5e>
 438:	5b c0       	rjmp	.+182    	; 0x4f0 <__stack+0x91>
 43a:	22 e8       	ldi	r18, 0x82	; 130
 43c:	3f ef       	ldi	r19, 0xFF	; 255
 43e:	26 1b       	sub	r18, r22
 440:	37 0b       	sbc	r19, r23
 442:	2a 31       	cpi	r18, 0x1A	; 26
 444:	31 05       	cpc	r19, r1
 446:	2c f0       	brlt	.+10     	; 0x452 <__pack_f+0x76>
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	2a c0       	rjmp	.+84     	; 0x4a6 <__stack+0x47>
 452:	b8 01       	movw	r22, r16
 454:	a7 01       	movw	r20, r14
 456:	02 2e       	mov	r0, r18
 458:	04 c0       	rjmp	.+8      	; 0x462 <__stack+0x3>
 45a:	76 95       	lsr	r23
 45c:	67 95       	ror	r22
 45e:	57 95       	ror	r21
 460:	47 95       	ror	r20
 462:	0a 94       	dec	r0
 464:	d2 f7       	brpl	.-12     	; 0x45a <__pack_f+0x7e>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	a0 e0       	ldi	r26, 0x00	; 0
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	04 c0       	rjmp	.+8      	; 0x478 <__stack+0x19>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	aa 1f       	adc	r26, r26
 476:	bb 1f       	adc	r27, r27
 478:	2a 95       	dec	r18
 47a:	d2 f7       	brpl	.-12     	; 0x470 <__stack+0x11>
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	a1 09       	sbc	r26, r1
 480:	b1 09       	sbc	r27, r1
 482:	8e 21       	and	r24, r14
 484:	9f 21       	and	r25, r15
 486:	a0 23       	and	r26, r16
 488:	b1 23       	and	r27, r17
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	a1 05       	cpc	r26, r1
 48e:	b1 05       	cpc	r27, r1
 490:	21 f0       	breq	.+8      	; 0x49a <__stack+0x3b>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	a0 e0       	ldi	r26, 0x00	; 0
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	9a 01       	movw	r18, r20
 49c:	ab 01       	movw	r20, r22
 49e:	28 2b       	or	r18, r24
 4a0:	39 2b       	or	r19, r25
 4a2:	4a 2b       	or	r20, r26
 4a4:	5b 2b       	or	r21, r27
 4a6:	da 01       	movw	r26, r20
 4a8:	c9 01       	movw	r24, r18
 4aa:	8f 77       	andi	r24, 0x7F	; 127
 4ac:	90 70       	andi	r25, 0x00	; 0
 4ae:	a0 70       	andi	r26, 0x00	; 0
 4b0:	b0 70       	andi	r27, 0x00	; 0
 4b2:	80 34       	cpi	r24, 0x40	; 64
 4b4:	91 05       	cpc	r25, r1
 4b6:	a1 05       	cpc	r26, r1
 4b8:	b1 05       	cpc	r27, r1
 4ba:	39 f4       	brne	.+14     	; 0x4ca <__stack+0x6b>
 4bc:	27 ff       	sbrs	r18, 7
 4be:	09 c0       	rjmp	.+18     	; 0x4d2 <__stack+0x73>
 4c0:	20 5c       	subi	r18, 0xC0	; 192
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	4f 4f       	sbci	r20, 0xFF	; 255
 4c6:	5f 4f       	sbci	r21, 0xFF	; 255
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__stack+0x73>
 4ca:	21 5c       	subi	r18, 0xC1	; 193
 4cc:	3f 4f       	sbci	r19, 0xFF	; 255
 4ce:	4f 4f       	sbci	r20, 0xFF	; 255
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255
 4d2:	e0 e0       	ldi	r30, 0x00	; 0
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	20 30       	cpi	r18, 0x00	; 0
 4d8:	a0 e0       	ldi	r26, 0x00	; 0
 4da:	3a 07       	cpc	r19, r26
 4dc:	a0 e0       	ldi	r26, 0x00	; 0
 4de:	4a 07       	cpc	r20, r26
 4e0:	a0 e4       	ldi	r26, 0x40	; 64
 4e2:	5a 07       	cpc	r21, r26
 4e4:	10 f0       	brcs	.+4      	; 0x4ea <__stack+0x8b>
 4e6:	e1 e0       	ldi	r30, 0x01	; 1
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	79 01       	movw	r14, r18
 4ec:	8a 01       	movw	r16, r20
 4ee:	27 c0       	rjmp	.+78     	; 0x53e <__stack+0xdf>
 4f0:	60 38       	cpi	r22, 0x80	; 128
 4f2:	71 05       	cpc	r23, r1
 4f4:	64 f5       	brge	.+88     	; 0x54e <__stack+0xef>
 4f6:	fb 01       	movw	r30, r22
 4f8:	e1 58       	subi	r30, 0x81	; 129
 4fa:	ff 4f       	sbci	r31, 0xFF	; 255
 4fc:	d8 01       	movw	r26, r16
 4fe:	c7 01       	movw	r24, r14
 500:	8f 77       	andi	r24, 0x7F	; 127
 502:	90 70       	andi	r25, 0x00	; 0
 504:	a0 70       	andi	r26, 0x00	; 0
 506:	b0 70       	andi	r27, 0x00	; 0
 508:	80 34       	cpi	r24, 0x40	; 64
 50a:	91 05       	cpc	r25, r1
 50c:	a1 05       	cpc	r26, r1
 50e:	b1 05       	cpc	r27, r1
 510:	39 f4       	brne	.+14     	; 0x520 <__stack+0xc1>
 512:	e7 fe       	sbrs	r14, 7
 514:	0d c0       	rjmp	.+26     	; 0x530 <__stack+0xd1>
 516:	80 e4       	ldi	r24, 0x40	; 64
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	a0 e0       	ldi	r26, 0x00	; 0
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	04 c0       	rjmp	.+8      	; 0x528 <__stack+0xc9>
 520:	8f e3       	ldi	r24, 0x3F	; 63
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	a0 e0       	ldi	r26, 0x00	; 0
 526:	b0 e0       	ldi	r27, 0x00	; 0
 528:	e8 0e       	add	r14, r24
 52a:	f9 1e       	adc	r15, r25
 52c:	0a 1f       	adc	r16, r26
 52e:	1b 1f       	adc	r17, r27
 530:	17 ff       	sbrs	r17, 7
 532:	05 c0       	rjmp	.+10     	; 0x53e <__stack+0xdf>
 534:	16 95       	lsr	r17
 536:	07 95       	ror	r16
 538:	f7 94       	ror	r15
 53a:	e7 94       	ror	r14
 53c:	31 96       	adiw	r30, 0x01	; 1
 53e:	87 e0       	ldi	r24, 0x07	; 7
 540:	16 95       	lsr	r17
 542:	07 95       	ror	r16
 544:	f7 94       	ror	r15
 546:	e7 94       	ror	r14
 548:	8a 95       	dec	r24
 54a:	d1 f7       	brne	.-12     	; 0x540 <__stack+0xe1>
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__stack+0xf9>
 54e:	ee 24       	eor	r14, r14
 550:	ff 24       	eor	r15, r15
 552:	87 01       	movw	r16, r14
 554:	ef ef       	ldi	r30, 0xFF	; 255
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	6e 2f       	mov	r22, r30
 55a:	67 95       	ror	r22
 55c:	66 27       	eor	r22, r22
 55e:	67 95       	ror	r22
 560:	90 2f       	mov	r25, r16
 562:	9f 77       	andi	r25, 0x7F	; 127
 564:	d7 94       	ror	r13
 566:	dd 24       	eor	r13, r13
 568:	d7 94       	ror	r13
 56a:	8e 2f       	mov	r24, r30
 56c:	86 95       	lsr	r24
 56e:	49 2f       	mov	r20, r25
 570:	46 2b       	or	r20, r22
 572:	58 2f       	mov	r21, r24
 574:	5d 29       	or	r21, r13
 576:	b7 01       	movw	r22, r14
 578:	ca 01       	movw	r24, r20
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	08 95       	ret

00000586 <__unpack_f>:
 586:	fc 01       	movw	r30, r24
 588:	db 01       	movw	r26, r22
 58a:	40 81       	ld	r20, Z
 58c:	51 81       	ldd	r21, Z+1	; 0x01
 58e:	22 81       	ldd	r18, Z+2	; 0x02
 590:	62 2f       	mov	r22, r18
 592:	6f 77       	andi	r22, 0x7F	; 127
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	22 1f       	adc	r18, r18
 598:	22 27       	eor	r18, r18
 59a:	22 1f       	adc	r18, r18
 59c:	93 81       	ldd	r25, Z+3	; 0x03
 59e:	89 2f       	mov	r24, r25
 5a0:	88 0f       	add	r24, r24
 5a2:	82 2b       	or	r24, r18
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	99 1f       	adc	r25, r25
 5aa:	99 27       	eor	r25, r25
 5ac:	99 1f       	adc	r25, r25
 5ae:	11 96       	adiw	r26, 0x01	; 1
 5b0:	9c 93       	st	X, r25
 5b2:	11 97       	sbiw	r26, 0x01	; 1
 5b4:	21 15       	cp	r18, r1
 5b6:	31 05       	cpc	r19, r1
 5b8:	a9 f5       	brne	.+106    	; 0x624 <__unpack_f+0x9e>
 5ba:	41 15       	cp	r20, r1
 5bc:	51 05       	cpc	r21, r1
 5be:	61 05       	cpc	r22, r1
 5c0:	71 05       	cpc	r23, r1
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <__unpack_f+0x42>
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	37 c0       	rjmp	.+110    	; 0x636 <__unpack_f+0xb0>
 5c8:	82 e8       	ldi	r24, 0x82	; 130
 5ca:	9f ef       	ldi	r25, 0xFF	; 255
 5cc:	13 96       	adiw	r26, 0x03	; 3
 5ce:	9c 93       	st	X, r25
 5d0:	8e 93       	st	-X, r24
 5d2:	12 97       	sbiw	r26, 0x02	; 2
 5d4:	9a 01       	movw	r18, r20
 5d6:	ab 01       	movw	r20, r22
 5d8:	67 e0       	ldi	r22, 0x07	; 7
 5da:	22 0f       	add	r18, r18
 5dc:	33 1f       	adc	r19, r19
 5de:	44 1f       	adc	r20, r20
 5e0:	55 1f       	adc	r21, r21
 5e2:	6a 95       	dec	r22
 5e4:	d1 f7       	brne	.-12     	; 0x5da <__unpack_f+0x54>
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	8c 93       	st	X, r24
 5ea:	0d c0       	rjmp	.+26     	; 0x606 <__unpack_f+0x80>
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	44 1f       	adc	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	12 96       	adiw	r26, 0x02	; 2
 5f6:	8d 91       	ld	r24, X+
 5f8:	9c 91       	ld	r25, X
 5fa:	13 97       	sbiw	r26, 0x03	; 3
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	13 96       	adiw	r26, 0x03	; 3
 600:	9c 93       	st	X, r25
 602:	8e 93       	st	-X, r24
 604:	12 97       	sbiw	r26, 0x02	; 2
 606:	20 30       	cpi	r18, 0x00	; 0
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	38 07       	cpc	r19, r24
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	48 07       	cpc	r20, r24
 610:	80 e4       	ldi	r24, 0x40	; 64
 612:	58 07       	cpc	r21, r24
 614:	58 f3       	brcs	.-42     	; 0x5ec <__unpack_f+0x66>
 616:	14 96       	adiw	r26, 0x04	; 4
 618:	2d 93       	st	X+, r18
 61a:	3d 93       	st	X+, r19
 61c:	4d 93       	st	X+, r20
 61e:	5c 93       	st	X, r21
 620:	17 97       	sbiw	r26, 0x07	; 7
 622:	08 95       	ret
 624:	2f 3f       	cpi	r18, 0xFF	; 255
 626:	31 05       	cpc	r19, r1
 628:	79 f4       	brne	.+30     	; 0x648 <__unpack_f+0xc2>
 62a:	41 15       	cp	r20, r1
 62c:	51 05       	cpc	r21, r1
 62e:	61 05       	cpc	r22, r1
 630:	71 05       	cpc	r23, r1
 632:	19 f4       	brne	.+6      	; 0x63a <__unpack_f+0xb4>
 634:	84 e0       	ldi	r24, 0x04	; 4
 636:	8c 93       	st	X, r24
 638:	08 95       	ret
 63a:	64 ff       	sbrs	r22, 4
 63c:	03 c0       	rjmp	.+6      	; 0x644 <__unpack_f+0xbe>
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	8c 93       	st	X, r24
 642:	12 c0       	rjmp	.+36     	; 0x668 <__unpack_f+0xe2>
 644:	1c 92       	st	X, r1
 646:	10 c0       	rjmp	.+32     	; 0x668 <__unpack_f+0xe2>
 648:	2f 57       	subi	r18, 0x7F	; 127
 64a:	30 40       	sbci	r19, 0x00	; 0
 64c:	13 96       	adiw	r26, 0x03	; 3
 64e:	3c 93       	st	X, r19
 650:	2e 93       	st	-X, r18
 652:	12 97       	sbiw	r26, 0x02	; 2
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	8c 93       	st	X, r24
 658:	87 e0       	ldi	r24, 0x07	; 7
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	66 1f       	adc	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	8a 95       	dec	r24
 664:	d1 f7       	brne	.-12     	; 0x65a <__unpack_f+0xd4>
 666:	70 64       	ori	r23, 0x40	; 64
 668:	14 96       	adiw	r26, 0x04	; 4
 66a:	4d 93       	st	X+, r20
 66c:	5d 93       	st	X+, r21
 66e:	6d 93       	st	X+, r22
 670:	7c 93       	st	X, r23
 672:	17 97       	sbiw	r26, 0x07	; 7
 674:	08 95       	ret

00000676 <ADC_init>:


#include"ADC.h"

void ADC_init()
{
 676:	df 93       	push	r29
 678:	cf 93       	push	r28
 67a:	cd b7       	in	r28, 0x3d	; 61
 67c:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0;
 67e:	e7 e2       	ldi	r30, 0x27	; 39
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	10 82       	st	Z, r1
	SET_BIT(ADCSRA,ADEN);/*enable adc*/
 684:	a6 e2       	ldi	r26, 0x26	; 38
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	e6 e2       	ldi	r30, 0x26	; 38
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	80 68       	ori	r24, 0x80	; 128
 690:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADIF);/*clear interrupt flag*/
 692:	a6 e2       	ldi	r26, 0x26	; 38
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	e6 e2       	ldi	r30, 0x26	; 38
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	80 61       	ori	r24, 0x10	; 16
 69e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);/*---- prescaler 8----*/
 6a0:	a6 e2       	ldi	r26, 0x26	; 38
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	e6 e2       	ldi	r30, 0x26	; 38
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS0);
 6ae:	a6 e2       	ldi	r26, 0x26	; 38
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	e6 e2       	ldi	r30, 0x26	; 38
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	81 60       	ori	r24, 0x01	; 1
 6ba:	8c 93       	st	X, r24


}
 6bc:	cf 91       	pop	r28
 6be:	df 91       	pop	r29
 6c0:	08 95       	ret

000006c2 <ADC_readChannel>:
uint16 ADC_readChannel()
{
 6c2:	df 93       	push	r29
 6c4:	cf 93       	push	r28
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
 6ca:	a6 e2       	ldi	r26, 0x26	; 38
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	e6 e2       	ldi	r30, 0x26	; 38
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	80 64       	ori	r24, 0x40	; 64
 6d6:	8c 93       	st	X, r24
	while(BIT_IS_CLR(ADCSRA,ADIF))
 6d8:	e6 e2       	ldi	r30, 0x26	; 38
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	88 2f       	mov	r24, r24
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	80 71       	andi	r24, 0x10	; 16
 6e4:	90 70       	andi	r25, 0x00	; 0
 6e6:	00 97       	sbiw	r24, 0x00	; 0
 6e8:	b9 f3       	breq	.-18     	; 0x6d8 <ADC_readChannel+0x16>
	{

	}
	SET_BIT(ADCSRA,ADIF);/*clear interrupt flag*/
 6ea:	a6 e2       	ldi	r26, 0x26	; 38
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e6 e2       	ldi	r30, 0x26	; 38
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	80 61       	ori	r24, 0x10	; 16
 6f6:	8c 93       	st	X, r24
	return (ADC&0x3ff);
 6f8:	e4 e2       	ldi	r30, 0x24	; 36
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	91 81       	ldd	r25, Z+1	; 0x01
 700:	93 70       	andi	r25, 0x03	; 3

}
 702:	cf 91       	pop	r28
 704:	df 91       	pop	r29
 706:	08 95       	ret

00000708 <EEPROM_writeByte>:
 *      Author: Mostafa
 */

#include"EEPROM.h"
void EEPROM_writeByte(uint16 addr ,uint8 data)
{
 708:	df 93       	push	r29
 70a:	cf 93       	push	r28
 70c:	00 d0       	rcall	.+0      	; 0x70e <EEPROM_writeByte+0x6>
 70e:	0f 92       	push	r0
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	9a 83       	std	Y+2, r25	; 0x02
 716:	89 83       	std	Y+1, r24	; 0x01
 718:	6b 83       	std	Y+3, r22	; 0x03
	while(BIT_IS_SET(EECR,EEWE));//wait until EEWE is zero
 71a:	ec e3       	ldi	r30, 0x3C	; 60
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	88 2f       	mov	r24, r24
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	82 70       	andi	r24, 0x02	; 2
 726:	90 70       	andi	r25, 0x00	; 0
 728:	00 97       	sbiw	r24, 0x00	; 0
 72a:	b9 f7       	brne	.-18     	; 0x71a <EEPROM_writeByte+0x12>
	while(BIT_IS_SET(SPMCR,SPMEN)); //wait SPMEN to be zero
 72c:	e7 e5       	ldi	r30, 0x57	; 87
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	88 2f       	mov	r24, r24
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	81 70       	andi	r24, 0x01	; 1
 738:	90 70       	andi	r25, 0x00	; 0
 73a:	88 23       	and	r24, r24
 73c:	b9 f7       	brne	.-18     	; 0x72c <EEPROM_writeByte+0x24>
	EEAR=addr;
 73e:	ee e3       	ldi	r30, 0x3E	; 62
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	9a 81       	ldd	r25, Y+2	; 0x02
 746:	91 83       	std	Z+1, r25	; 0x01
 748:	80 83       	st	Z, r24
	EEDR=data;
 74a:	ed e3       	ldi	r30, 0x3D	; 61
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	80 83       	st	Z, r24
	EECR=0b0100;//Write a logical one to the EEMWE bit while writing a zero to EEWE in EECR
 752:	ec e3       	ldi	r30, 0x3C	; 60
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	84 e0       	ldi	r24, 0x04	; 4
 758:	80 83       	st	Z, r24
	EECR=(1<<EEWE);
 75a:	ec e3       	ldi	r30, 0x3C	; 60
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	80 83       	st	Z, r24


}
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	cf 91       	pop	r28
 76a:	df 91       	pop	r29
 76c:	08 95       	ret

0000076e <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 addr)
{
 76e:	df 93       	push	r29
 770:	cf 93       	push	r28
 772:	00 d0       	rcall	.+0      	; 0x774 <EEPROM_readByte+0x6>
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
 778:	9a 83       	std	Y+2, r25	; 0x02
 77a:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_SET(EECR,EEWE));//wait until EEWE is zero
 77c:	ec e3       	ldi	r30, 0x3C	; 60
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	88 2f       	mov	r24, r24
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	82 70       	andi	r24, 0x02	; 2
 788:	90 70       	andi	r25, 0x00	; 0
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	b9 f7       	brne	.-18     	; 0x77c <EEPROM_readByte+0xe>
	EEAR=addr;
 78e:	ee e3       	ldi	r30, 0x3E	; 62
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	9a 81       	ldd	r25, Y+2	; 0x02
 796:	91 83       	std	Z+1, r25	; 0x01
 798:	80 83       	st	Z, r24
	EECR=(1<<EERE);
 79a:	ec e3       	ldi	r30, 0x3C	; 60
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	80 83       	st	Z, r24
	return EEDR;
 7a2:	ed e3       	ldi	r30, 0x3D	; 61
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z

}
 7a8:	0f 90       	pop	r0
 7aa:	0f 90       	pop	r0
 7ac:	cf 91       	pop	r28
 7ae:	df 91       	pop	r29
 7b0:	08 95       	ret

000007b2 <EEPROM_writeString>:
void EEPROM_writeString(uint16 addr,uint8*str)
{
 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	00 d0       	rcall	.+0      	; 0x7b8 <EEPROM_writeString+0x6>
 7b8:	00 d0       	rcall	.+0      	; 0x7ba <EEPROM_writeString+0x8>
 7ba:	0f 92       	push	r0
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
 7c0:	9b 83       	std	Y+3, r25	; 0x03
 7c2:	8a 83       	std	Y+2, r24	; 0x02
 7c4:	7d 83       	std	Y+5, r23	; 0x05
 7c6:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i =0;
 7c8:	19 82       	std	Y+1, r1	; 0x01
 7ca:	18 c0       	rjmp	.+48     	; 0x7fc <EEPROM_writeString+0x4a>
	while(str[i]!='\0')
	{
	EEPROM_writeByte(addr+i,str[i]);
 7cc:	89 81       	ldd	r24, Y+1	; 0x01
 7ce:	28 2f       	mov	r18, r24
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	8a 81       	ldd	r24, Y+2	; 0x02
 7d4:	9b 81       	ldd	r25, Y+3	; 0x03
 7d6:	a9 01       	movw	r20, r18
 7d8:	48 0f       	add	r20, r24
 7da:	59 1f       	adc	r21, r25
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
 7de:	28 2f       	mov	r18, r24
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	8c 81       	ldd	r24, Y+4	; 0x04
 7e4:	9d 81       	ldd	r25, Y+5	; 0x05
 7e6:	fc 01       	movw	r30, r24
 7e8:	e2 0f       	add	r30, r18
 7ea:	f3 1f       	adc	r31, r19
 7ec:	20 81       	ld	r18, Z
 7ee:	ca 01       	movw	r24, r20
 7f0:	62 2f       	mov	r22, r18
 7f2:	0e 94 84 03 	call	0x708	; 0x708 <EEPROM_writeByte>
	i++;
 7f6:	89 81       	ldd	r24, Y+1	; 0x01
 7f8:	8f 5f       	subi	r24, 0xFF	; 255
 7fa:	89 83       	std	Y+1, r24	; 0x01

}
void EEPROM_writeString(uint16 addr,uint8*str)
{
	uint8 i =0;
	while(str[i]!='\0')
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	28 2f       	mov	r18, r24
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	8c 81       	ldd	r24, Y+4	; 0x04
 804:	9d 81       	ldd	r25, Y+5	; 0x05
 806:	fc 01       	movw	r30, r24
 808:	e2 0f       	add	r30, r18
 80a:	f3 1f       	adc	r31, r19
 80c:	80 81       	ld	r24, Z
 80e:	88 23       	and	r24, r24
 810:	e9 f6       	brne	.-70     	; 0x7cc <EEPROM_writeString+0x1a>
	{
	EEPROM_writeByte(addr+i,str[i]);
	i++;
	}
}
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	0f 90       	pop	r0
 81a:	0f 90       	pop	r0
 81c:	cf 91       	pop	r28
 81e:	df 91       	pop	r29
 820:	08 95       	ret

00000822 <EEPROM_readString>:

void EEPROM_readString(uint16 addr,uint8*str,uint8 size)
{
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	df 93       	push	r29
 828:	cf 93       	push	r28
 82a:	00 d0       	rcall	.+0      	; 0x82c <EEPROM_readString+0xa>
 82c:	00 d0       	rcall	.+0      	; 0x82e <EEPROM_readString+0xc>
 82e:	00 d0       	rcall	.+0      	; 0x830 <EEPROM_readString+0xe>
 830:	cd b7       	in	r28, 0x3d	; 61
 832:	de b7       	in	r29, 0x3e	; 62
 834:	9b 83       	std	Y+3, r25	; 0x03
 836:	8a 83       	std	Y+2, r24	; 0x02
 838:	7d 83       	std	Y+5, r23	; 0x05
 83a:	6c 83       	std	Y+4, r22	; 0x04
 83c:	4e 83       	std	Y+6, r20	; 0x06
uint8 i;
for( i=0;i<size-1;i++)
 83e:	19 82       	std	Y+1, r1	; 0x01
 840:	16 c0       	rjmp	.+44     	; 0x86e <EEPROM_readString+0x4c>
{
	str[i]=EEPROM_readByte(addr+i);
 842:	89 81       	ldd	r24, Y+1	; 0x01
 844:	28 2f       	mov	r18, r24
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	8c 81       	ldd	r24, Y+4	; 0x04
 84a:	9d 81       	ldd	r25, Y+5	; 0x05
 84c:	8c 01       	movw	r16, r24
 84e:	02 0f       	add	r16, r18
 850:	13 1f       	adc	r17, r19
 852:	89 81       	ldd	r24, Y+1	; 0x01
 854:	28 2f       	mov	r18, r24
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	8a 81       	ldd	r24, Y+2	; 0x02
 85a:	9b 81       	ldd	r25, Y+3	; 0x03
 85c:	82 0f       	add	r24, r18
 85e:	93 1f       	adc	r25, r19
 860:	0e 94 b7 03 	call	0x76e	; 0x76e <EEPROM_readByte>
 864:	f8 01       	movw	r30, r16
 866:	80 83       	st	Z, r24
}

void EEPROM_readString(uint16 addr,uint8*str,uint8 size)
{
uint8 i;
for( i=0;i<size-1;i++)
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	8f 5f       	subi	r24, 0xFF	; 255
 86c:	89 83       	std	Y+1, r24	; 0x01
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	28 2f       	mov	r18, r24
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	8e 81       	ldd	r24, Y+6	; 0x06
 876:	88 2f       	mov	r24, r24
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	28 17       	cp	r18, r24
 87e:	39 07       	cpc	r19, r25
 880:	04 f3       	brlt	.-64     	; 0x842 <EEPROM_readString+0x20>
{
	str[i]=EEPROM_readByte(addr+i);

}
str[i]='\0';
 882:	89 81       	ldd	r24, Y+1	; 0x01
 884:	28 2f       	mov	r18, r24
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	8c 81       	ldd	r24, Y+4	; 0x04
 88a:	9d 81       	ldd	r25, Y+5	; 0x05
 88c:	fc 01       	movw	r30, r24
 88e:	e2 0f       	add	r30, r18
 890:	f3 1f       	adc	r31, r19
 892:	10 82       	st	Z, r1
}
 894:	26 96       	adiw	r28, 0x06	; 6
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	cd bf       	out	0x3d, r28	; 61
 8a0:	cf 91       	pop	r28
 8a2:	df 91       	pop	r29
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	08 95       	ret

000008aa <timer0_init>:
#include"EEPROM.h"
#include "ADC.h"
#include<avr/interrupt.h>

void timer0_init()
{
 8aa:	df 93       	push	r29
 8ac:	cf 93       	push	r28
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
	cli();
 8b2:	f8 94       	cli
	CLR_BIT(TCCR0,WGM01);
 8b4:	a3 e5       	ldi	r26, 0x53	; 83
 8b6:	b0 e0       	ldi	r27, 0x00	; 0
 8b8:	e3 e5       	ldi	r30, 0x53	; 83
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	87 7f       	andi	r24, 0xF7	; 247
 8c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM00);
 8c2:	a3 e5       	ldi	r26, 0x53	; 83
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e3 e5       	ldi	r30, 0x53	; 83
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	8f 7b       	andi	r24, 0xBF	; 191
 8ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS00);
 8d0:	a3 e5       	ldi	r26, 0x53	; 83
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	e3 e5       	ldi	r30, 0x53	; 83
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	8e 7f       	andi	r24, 0xFE	; 254
 8dc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
 8de:	a3 e5       	ldi	r26, 0x53	; 83
 8e0:	b0 e0       	ldi	r27, 0x00	; 0
 8e2:	e3 e5       	ldi	r30, 0x53	; 83
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	8d 7f       	andi	r24, 0xFD	; 253
 8ea:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
 8ec:	a3 e5       	ldi	r26, 0x53	; 83
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	e3 e5       	ldi	r30, 0x53	; 83
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	84 60       	ori	r24, 0x04	; 4
 8f8:	8c 93       	st	X, r24
	TCNT0=0x00;
 8fa:	e2 e5       	ldi	r30, 0x52	; 82
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TOIE0);
 900:	a9 e5       	ldi	r26, 0x59	; 89
 902:	b0 e0       	ldi	r27, 0x00	; 0
 904:	e9 e5       	ldi	r30, 0x59	; 89
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	81 60       	ori	r24, 0x01	; 1
 90c:	8c 93       	st	X, r24
	sei();
 90e:	78 94       	sei
}
 910:	cf 91       	pop	r28
 912:	df 91       	pop	r29
 914:	08 95       	ret

00000916 <main>:

volatile char commString[10]="0000000000";

int main(void)
{
 916:	df 93       	push	r29
 918:	cf 93       	push	r28
 91a:	0f 92       	push	r0
 91c:	cd b7       	in	r28, 0x3d	; 61
 91e:	de b7       	in	r29, 0x3e	; 62
/*INITIALIZATIONS-------------------*/
DDRC=0xFF;
 920:	e4 e3       	ldi	r30, 0x34	; 52
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	80 83       	st	Z, r24
SPI_initSlave();
 928:	0e 94 97 05 	call	0xb2e	; 0xb2e <SPI_initSlave>
ADC_init();
 92c:	0e 94 3b 03 	call	0x676	; 0x676 <ADC_init>
timer0_init();
 930:	0e 94 55 04 	call	0x8aa	; 0x8aa <timer0_init>
/*--------------------------------*/
	while(1)
	{

		SPI_receiveString(commString);//recive comm String commands from MC1 to control rooms
 934:	88 e6       	ldi	r24, 0x68	; 104
 936:	91 e0       	ldi	r25, 0x01	; 1
 938:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_receiveString>
		 * 							airCondSetValue,
		 * 							Null,
		 */

		/*control rooms and tv as we recived from comm string---------*/
		for(char i=0;i<5;i++)
 93c:	19 82       	std	Y+1, r1	; 0x01
 93e:	34 c0       	rjmp	.+104    	; 0x9a8 <main+0x92>
		{
		if(commString[i]-'0')
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	88 2f       	mov	r24, r24
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	fc 01       	movw	r30, r24
 948:	e8 59       	subi	r30, 0x98	; 152
 94a:	fe 4f       	sbci	r31, 0xFE	; 254
 94c:	80 81       	ld	r24, Z
 94e:	80 33       	cpi	r24, 0x30	; 48
 950:	a1 f0       	breq	.+40     	; 0x97a <main+0x64>
		{
		SET_BIT(PORTC,i);
 952:	a5 e3       	ldi	r26, 0x35	; 53
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	e5 e3       	ldi	r30, 0x35	; 53
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	48 2f       	mov	r20, r24
 95e:	89 81       	ldd	r24, Y+1	; 0x01
 960:	28 2f       	mov	r18, r24
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	02 2e       	mov	r0, r18
 96a:	02 c0       	rjmp	.+4      	; 0x970 <main+0x5a>
 96c:	88 0f       	add	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	0a 94       	dec	r0
 972:	e2 f7       	brpl	.-8      	; 0x96c <main+0x56>
 974:	84 2b       	or	r24, r20
 976:	8c 93       	st	X, r24
 978:	14 c0       	rjmp	.+40     	; 0x9a2 <main+0x8c>
		}
		else
		{
		CLR_BIT(PORTC,i);
 97a:	a5 e3       	ldi	r26, 0x35	; 53
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	e5 e3       	ldi	r30, 0x35	; 53
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	48 2f       	mov	r20, r24
 986:	89 81       	ldd	r24, Y+1	; 0x01
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	02 2e       	mov	r0, r18
 992:	02 c0       	rjmp	.+4      	; 0x998 <main+0x82>
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	0a 94       	dec	r0
 99a:	e2 f7       	brpl	.-8      	; 0x994 <main+0x7e>
 99c:	80 95       	com	r24
 99e:	84 23       	and	r24, r20
 9a0:	8c 93       	st	X, r24
		 * 							airCondSetValue,
		 * 							Null,
		 */

		/*control rooms and tv as we recived from comm string---------*/
		for(char i=0;i<5;i++)
 9a2:	89 81       	ldd	r24, Y+1	; 0x01
 9a4:	8f 5f       	subi	r24, 0xFF	; 255
 9a6:	89 83       	std	Y+1, r24	; 0x01
 9a8:	89 81       	ldd	r24, Y+1	; 0x01
 9aa:	85 30       	cpi	r24, 0x05	; 5
 9ac:	48 f2       	brcs	.-110    	; 0x940 <main+0x2a>
 9ae:	c2 cf       	rjmp	.-124    	; 0x934 <main+0x1e>

000009b0 <__vector_9>:

	}
}

ISR(TIMER0_OVF_vect)
{
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	2f 93       	push	r18
 9bc:	3f 93       	push	r19
 9be:	4f 93       	push	r20
 9c0:	5f 93       	push	r21
 9c2:	6f 93       	push	r22
 9c4:	7f 93       	push	r23
 9c6:	8f 93       	push	r24
 9c8:	9f 93       	push	r25
 9ca:	af 93       	push	r26
 9cc:	bf 93       	push	r27
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
 9d2:	df 93       	push	r29
 9d4:	cf 93       	push	r28
 9d6:	00 d0       	rcall	.+0      	; 0x9d8 <__vector_9+0x28>
 9d8:	00 d0       	rcall	.+0      	; 0x9da <__vector_9+0x2a>
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
	long temp;
	if(commString[5]-'0')
 9de:	80 91 6d 01 	lds	r24, 0x016D
 9e2:	80 33       	cpi	r24, 0x30	; 48
 9e4:	09 f4       	brne	.+2      	; 0x9e8 <__vector_9+0x38>
 9e6:	54 c0       	rjmp	.+168    	; 0xa90 <__vector_9+0xe0>
			{
				temp = ADC_readChannel();
 9e8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <ADC_readChannel>
 9ec:	cc 01       	movw	r24, r24
 9ee:	a0 e0       	ldi	r26, 0x00	; 0
 9f0:	b0 e0       	ldi	r27, 0x00	; 0
 9f2:	89 83       	std	Y+1, r24	; 0x01
 9f4:	9a 83       	std	Y+2, r25	; 0x02
 9f6:	ab 83       	std	Y+3, r26	; 0x03
 9f8:	bc 83       	std	Y+4, r27	; 0x04
				temp = (temp*150*5)/(1023*1.5);
 9fa:	89 81       	ldd	r24, Y+1	; 0x01
 9fc:	9a 81       	ldd	r25, Y+2	; 0x02
 9fe:	ab 81       	ldd	r26, Y+3	; 0x03
 a00:	bc 81       	ldd	r27, Y+4	; 0x04
 a02:	2e ee       	ldi	r18, 0xEE	; 238
 a04:	32 e0       	ldi	r19, 0x02	; 2
 a06:	40 e0       	ldi	r20, 0x00	; 0
 a08:	50 e0       	ldi	r21, 0x00	; 0
 a0a:	bc 01       	movw	r22, r24
 a0c:	cd 01       	movw	r24, r26
 a0e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__mulsi3>
 a12:	dc 01       	movw	r26, r24
 a14:	cb 01       	movw	r24, r22
 a16:	bc 01       	movw	r22, r24
 a18:	cd 01       	movw	r24, r26
 a1a:	0e 94 ed 00 	call	0x1da	; 0x1da <__floatsisf>
 a1e:	dc 01       	movw	r26, r24
 a20:	cb 01       	movw	r24, r22
 a22:	bc 01       	movw	r22, r24
 a24:	cd 01       	movw	r24, r26
 a26:	20 e0       	ldi	r18, 0x00	; 0
 a28:	30 ed       	ldi	r19, 0xD0	; 208
 a2a:	4f eb       	ldi	r20, 0xBF	; 191
 a2c:	54 e4       	ldi	r21, 0x44	; 68
 a2e:	0e 94 41 00 	call	0x82	; 0x82 <__divsf3>
 a32:	dc 01       	movw	r26, r24
 a34:	cb 01       	movw	r24, r22
 a36:	bc 01       	movw	r22, r24
 a38:	cd 01       	movw	r24, r26
 a3a:	0e 94 4b 01 	call	0x296	; 0x296 <__fixsfsi>
 a3e:	dc 01       	movw	r26, r24
 a40:	cb 01       	movw	r24, r22
 a42:	89 83       	std	Y+1, r24	; 0x01
 a44:	9a 83       	std	Y+2, r25	; 0x02
 a46:	ab 83       	std	Y+3, r26	; 0x03
 a48:	bc 83       	std	Y+4, r27	; 0x04
				if((commString[6]-'0')<temp)
 a4a:	80 91 6e 01 	lds	r24, 0x016E
 a4e:	88 2f       	mov	r24, r24
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	c0 97       	sbiw	r24, 0x30	; 48
 a54:	9c 01       	movw	r18, r24
 a56:	44 27       	eor	r20, r20
 a58:	37 fd       	sbrc	r19, 7
 a5a:	40 95       	com	r20
 a5c:	54 2f       	mov	r21, r20
 a5e:	89 81       	ldd	r24, Y+1	; 0x01
 a60:	9a 81       	ldd	r25, Y+2	; 0x02
 a62:	ab 81       	ldd	r26, Y+3	; 0x03
 a64:	bc 81       	ldd	r27, Y+4	; 0x04
 a66:	28 17       	cp	r18, r24
 a68:	39 07       	cpc	r19, r25
 a6a:	4a 07       	cpc	r20, r26
 a6c:	5b 07       	cpc	r21, r27
 a6e:	44 f4       	brge	.+16     	; 0xa80 <__vector_9+0xd0>
				{
					SET_BIT(PORTC,5);
 a70:	a5 e3       	ldi	r26, 0x35	; 53
 a72:	b0 e0       	ldi	r27, 0x00	; 0
 a74:	e5 e3       	ldi	r30, 0x35	; 53
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	80 81       	ld	r24, Z
 a7a:	80 62       	ori	r24, 0x20	; 32
 a7c:	8c 93       	st	X, r24
 a7e:	0f c0       	rjmp	.+30     	; 0xa9e <__vector_9+0xee>
				}
				else
				{
					CLR_BIT(PORTC,5);
 a80:	a5 e3       	ldi	r26, 0x35	; 53
 a82:	b0 e0       	ldi	r27, 0x00	; 0
 a84:	e5 e3       	ldi	r30, 0x35	; 53
 a86:	f0 e0       	ldi	r31, 0x00	; 0
 a88:	80 81       	ld	r24, Z
 a8a:	8f 7d       	andi	r24, 0xDF	; 223
 a8c:	8c 93       	st	X, r24
 a8e:	07 c0       	rjmp	.+14     	; 0xa9e <__vector_9+0xee>
				}
			}
	else
	{
		CLR_BIT(PORTC,5);
 a90:	a5 e3       	ldi	r26, 0x35	; 53
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	e5 e3       	ldi	r30, 0x35	; 53
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	8f 7d       	andi	r24, 0xDF	; 223
 a9c:	8c 93       	st	X, r24

	}
}
 a9e:	0f 90       	pop	r0
 aa0:	0f 90       	pop	r0
 aa2:	0f 90       	pop	r0
 aa4:	0f 90       	pop	r0
 aa6:	cf 91       	pop	r28
 aa8:	df 91       	pop	r29
 aaa:	ff 91       	pop	r31
 aac:	ef 91       	pop	r30
 aae:	bf 91       	pop	r27
 ab0:	af 91       	pop	r26
 ab2:	9f 91       	pop	r25
 ab4:	8f 91       	pop	r24
 ab6:	7f 91       	pop	r23
 ab8:	6f 91       	pop	r22
 aba:	5f 91       	pop	r21
 abc:	4f 91       	pop	r20
 abe:	3f 91       	pop	r19
 ac0:	2f 91       	pop	r18
 ac2:	0f 90       	pop	r0
 ac4:	0f be       	out	0x3f, r0	; 63
 ac6:	0f 90       	pop	r0
 ac8:	1f 90       	pop	r1
 aca:	18 95       	reti

00000acc <SPI_initMaster>:
 *      Author: Mostafa
 */

#include"spi.h"
void SPI_initMaster()
{
 acc:	df 93       	push	r29
 ace:	cf 93       	push	r28
 ad0:	cd b7       	in	r28, 0x3d	; 61
 ad2:	de b7       	in	r29, 0x3e	; 62

DDRB|=0b10110000; //set sck and mosi and ss to output
 ad4:	a7 e3       	ldi	r26, 0x37	; 55
 ad6:	b0 e0       	ldi	r27, 0x00	; 0
 ad8:	e7 e3       	ldi	r30, 0x37	; 55
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	80 81       	ld	r24, Z
 ade:	80 6b       	ori	r24, 0xB0	; 176
 ae0:	8c 93       	st	X, r24
CLR_BIT(DDRB,6);//set miso as input
 ae2:	a7 e3       	ldi	r26, 0x37	; 55
 ae4:	b0 e0       	ldi	r27, 0x00	; 0
 ae6:	e7 e3       	ldi	r30, 0x37	; 55
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	80 81       	ld	r24, Z
 aec:	8f 7b       	andi	r24, 0xBF	; 191
 aee:	8c 93       	st	X, r24
SET_BIT(SPCR,MSTR); // set device as master
 af0:	ad e2       	ldi	r26, 0x2D	; 45
 af2:	b0 e0       	ldi	r27, 0x00	; 0
 af4:	ed e2       	ldi	r30, 0x2D	; 45
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	80 81       	ld	r24, Z
 afa:	80 61       	ori	r24, 0x10	; 16
 afc:	8c 93       	st	X, r24
SET_BIT(SPCR,SPE); //spi enable
 afe:	ad e2       	ldi	r26, 0x2D	; 45
 b00:	b0 e0       	ldi	r27, 0x00	; 0
 b02:	ed e2       	ldi	r30, 0x2D	; 45
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	80 81       	ld	r24, Z
 b08:	80 64       	ori	r24, 0x40	; 64
 b0a:	8c 93       	st	X, r24
CLR_BIT(SPCR,CPOL);
 b0c:	ad e2       	ldi	r26, 0x2D	; 45
 b0e:	b0 e0       	ldi	r27, 0x00	; 0
 b10:	ed e2       	ldi	r30, 0x2D	; 45
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	80 81       	ld	r24, Z
 b16:	87 7f       	andi	r24, 0xF7	; 247
 b18:	8c 93       	st	X, r24
CLR_BIT(SPCR,CPHA);
 b1a:	ad e2       	ldi	r26, 0x2D	; 45
 b1c:	b0 e0       	ldi	r27, 0x00	; 0
 b1e:	ed e2       	ldi	r30, 0x2D	; 45
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	80 81       	ld	r24, Z
 b24:	8b 7f       	andi	r24, 0xFB	; 251
 b26:	8c 93       	st	X, r24
/*********** clock frequency fosc/4
 ***********SPI2X=0 SPR1=0 SPR0 =0
 */

}
 b28:	cf 91       	pop	r28
 b2a:	df 91       	pop	r29
 b2c:	08 95       	ret

00000b2e <SPI_initSlave>:
void SPI_initSlave()
{
 b2e:	df 93       	push	r29
 b30:	cf 93       	push	r28
 b32:	cd b7       	in	r28, 0x3d	; 61
 b34:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(DDRB,6); //set miso to output
 b36:	a7 e3       	ldi	r26, 0x37	; 55
 b38:	b0 e0       	ldi	r27, 0x00	; 0
 b3a:	e7 e3       	ldi	r30, 0x37	; 55
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	80 81       	ld	r24, Z
 b40:	80 64       	ori	r24, 0x40	; 64
 b42:	8c 93       	st	X, r24
	DDRB&=~(0b10110000); //set sck and mosi and ss to input
 b44:	a7 e3       	ldi	r26, 0x37	; 55
 b46:	b0 e0       	ldi	r27, 0x00	; 0
 b48:	e7 e3       	ldi	r30, 0x37	; 55
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	80 81       	ld	r24, Z
 b4e:	8f 74       	andi	r24, 0x4F	; 79
 b50:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPE); //spi enable
 b52:	ad e2       	ldi	r26, 0x2D	; 45
 b54:	b0 e0       	ldi	r27, 0x00	; 0
 b56:	ed e2       	ldi	r30, 0x2D	; 45
 b58:	f0 e0       	ldi	r31, 0x00	; 0
 b5a:	80 81       	ld	r24, Z
 b5c:	80 64       	ori	r24, 0x40	; 64
 b5e:	8c 93       	st	X, r24
	CLR_BIT(SPCR,MSTR); // set device as slave
 b60:	ad e2       	ldi	r26, 0x2D	; 45
 b62:	b0 e0       	ldi	r27, 0x00	; 0
 b64:	ed e2       	ldi	r30, 0x2D	; 45
 b66:	f0 e0       	ldi	r31, 0x00	; 0
 b68:	80 81       	ld	r24, Z
 b6a:	8f 7e       	andi	r24, 0xEF	; 239
 b6c:	8c 93       	st	X, r24
	/*********** clock frequency fosc/4
	 ***********SPI2X=0 SPR1=0 SPR0 =0
	 */
	CLR_BIT(SPCR,CPOL);
 b6e:	ad e2       	ldi	r26, 0x2D	; 45
 b70:	b0 e0       	ldi	r27, 0x00	; 0
 b72:	ed e2       	ldi	r30, 0x2D	; 45
 b74:	f0 e0       	ldi	r31, 0x00	; 0
 b76:	80 81       	ld	r24, Z
 b78:	87 7f       	andi	r24, 0xF7	; 247
 b7a:	8c 93       	st	X, r24
	CLR_BIT(SPCR,CPHA);
 b7c:	ad e2       	ldi	r26, 0x2D	; 45
 b7e:	b0 e0       	ldi	r27, 0x00	; 0
 b80:	ed e2       	ldi	r30, 0x2D	; 45
 b82:	f0 e0       	ldi	r31, 0x00	; 0
 b84:	80 81       	ld	r24, Z
 b86:	8b 7f       	andi	r24, 0xFB	; 251
 b88:	8c 93       	st	X, r24
}
 b8a:	cf 91       	pop	r28
 b8c:	df 91       	pop	r29
 b8e:	08 95       	ret

00000b90 <SPI_sendByte>:
void SPI_sendByte(char data)
{
 b90:	df 93       	push	r29
 b92:	cf 93       	push	r28
 b94:	0f 92       	push	r0
 b96:	cd b7       	in	r28, 0x3d	; 61
 b98:	de b7       	in	r29, 0x3e	; 62
 b9a:	89 83       	std	Y+1, r24	; 0x01
SPDR=data;
 b9c:	ef e2       	ldi	r30, 0x2F	; 47
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	89 81       	ldd	r24, Y+1	; 0x01
 ba2:	80 83       	st	Z, r24
while(BIT_IS_CLR(SPSR,SPIF)){}
 ba4:	ee e2       	ldi	r30, 0x2E	; 46
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	88 23       	and	r24, r24
 bac:	dc f7       	brge	.-10     	; 0xba4 <SPI_sendByte+0x14>
}
 bae:	0f 90       	pop	r0
 bb0:	cf 91       	pop	r28
 bb2:	df 91       	pop	r29
 bb4:	08 95       	ret

00000bb6 <SPI_receiveByte>:
char SPI_receiveByte()
{
 bb6:	df 93       	push	r29
 bb8:	cf 93       	push	r28
 bba:	cd b7       	in	r28, 0x3d	; 61
 bbc:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLR(SPSR,SPIF)){}
 bbe:	ee e2       	ldi	r30, 0x2E	; 46
 bc0:	f0 e0       	ldi	r31, 0x00	; 0
 bc2:	80 81       	ld	r24, Z
 bc4:	88 23       	and	r24, r24
 bc6:	dc f7       	brge	.-10     	; 0xbbe <SPI_receiveByte+0x8>
	return SPDR;
 bc8:	ef e2       	ldi	r30, 0x2F	; 47
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	80 81       	ld	r24, Z
}
 bce:	cf 91       	pop	r28
 bd0:	df 91       	pop	r29
 bd2:	08 95       	ret

00000bd4 <SPI_sendString>:
void SPI_sendString(char* string)
{
 bd4:	df 93       	push	r29
 bd6:	cf 93       	push	r28
 bd8:	00 d0       	rcall	.+0      	; 0xbda <SPI_sendString+0x6>
 bda:	0f 92       	push	r0
 bdc:	cd b7       	in	r28, 0x3d	; 61
 bde:	de b7       	in	r29, 0x3e	; 62
 be0:	9b 83       	std	Y+3, r25	; 0x03
 be2:	8a 83       	std	Y+2, r24	; 0x02
uint8 i=0;
 be4:	19 82       	std	Y+1, r1	; 0x01
 be6:	0e c0       	rjmp	.+28     	; 0xc04 <SPI_sendString+0x30>
while(string[i]!='#')
{
	SPI_sendByte(string[i]);
 be8:	89 81       	ldd	r24, Y+1	; 0x01
 bea:	28 2f       	mov	r18, r24
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	8a 81       	ldd	r24, Y+2	; 0x02
 bf0:	9b 81       	ldd	r25, Y+3	; 0x03
 bf2:	fc 01       	movw	r30, r24
 bf4:	e2 0f       	add	r30, r18
 bf6:	f3 1f       	adc	r31, r19
 bf8:	80 81       	ld	r24, Z
 bfa:	0e 94 c8 05 	call	0xb90	; 0xb90 <SPI_sendByte>
	i++;
 bfe:	89 81       	ldd	r24, Y+1	; 0x01
 c00:	8f 5f       	subi	r24, 0xFF	; 255
 c02:	89 83       	std	Y+1, r24	; 0x01
	return SPDR;
}
void SPI_sendString(char* string)
{
uint8 i=0;
while(string[i]!='#')
 c04:	89 81       	ldd	r24, Y+1	; 0x01
 c06:	28 2f       	mov	r18, r24
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	8a 81       	ldd	r24, Y+2	; 0x02
 c0c:	9b 81       	ldd	r25, Y+3	; 0x03
 c0e:	fc 01       	movw	r30, r24
 c10:	e2 0f       	add	r30, r18
 c12:	f3 1f       	adc	r31, r19
 c14:	80 81       	ld	r24, Z
 c16:	83 32       	cpi	r24, 0x23	; 35
 c18:	39 f7       	brne	.-50     	; 0xbe8 <SPI_sendString+0x14>
{
	SPI_sendByte(string[i]);
	i++;
}
SPI_sendByte('#');
 c1a:	83 e2       	ldi	r24, 0x23	; 35
 c1c:	0e 94 c8 05 	call	0xb90	; 0xb90 <SPI_sendByte>
}
 c20:	0f 90       	pop	r0
 c22:	0f 90       	pop	r0
 c24:	0f 90       	pop	r0
 c26:	cf 91       	pop	r28
 c28:	df 91       	pop	r29
 c2a:	08 95       	ret

00000c2c <SPI_receiveString>:
void SPI_receiveString(char* string)
{
 c2c:	0f 93       	push	r16
 c2e:	1f 93       	push	r17
 c30:	df 93       	push	r29
 c32:	cf 93       	push	r28
 c34:	00 d0       	rcall	.+0      	; 0xc36 <SPI_receiveString+0xa>
 c36:	0f 92       	push	r0
 c38:	cd b7       	in	r28, 0x3d	; 61
 c3a:	de b7       	in	r29, 0x3e	; 62
 c3c:	9b 83       	std	Y+3, r25	; 0x03
 c3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
 c40:	19 82       	std	Y+1, r1	; 0x01
	string[i]=SPI_receiveByte();
 c42:	89 81       	ldd	r24, Y+1	; 0x01
 c44:	28 2f       	mov	r18, r24
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	8a 81       	ldd	r24, Y+2	; 0x02
 c4a:	9b 81       	ldd	r25, Y+3	; 0x03
 c4c:	8c 01       	movw	r16, r24
 c4e:	02 0f       	add	r16, r18
 c50:	13 1f       	adc	r17, r19
 c52:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receiveByte>
 c56:	f8 01       	movw	r30, r16
 c58:	80 83       	st	Z, r24
 c5a:	0f c0       	rjmp	.+30     	; 0xc7a <SPI_receiveString+0x4e>
	while(string[i]!='#')
	{
		i++;
 c5c:	89 81       	ldd	r24, Y+1	; 0x01
 c5e:	8f 5f       	subi	r24, 0xFF	; 255
 c60:	89 83       	std	Y+1, r24	; 0x01
		string[i]=SPI_receiveByte();
 c62:	89 81       	ldd	r24, Y+1	; 0x01
 c64:	28 2f       	mov	r18, r24
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	8a 81       	ldd	r24, Y+2	; 0x02
 c6a:	9b 81       	ldd	r25, Y+3	; 0x03
 c6c:	8c 01       	movw	r16, r24
 c6e:	02 0f       	add	r16, r18
 c70:	13 1f       	adc	r17, r19
 c72:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SPI_receiveByte>
 c76:	f8 01       	movw	r30, r16
 c78:	80 83       	st	Z, r24
}
void SPI_receiveString(char* string)
{
	uint8 i =0;
	string[i]=SPI_receiveByte();
	while(string[i]!='#')
 c7a:	89 81       	ldd	r24, Y+1	; 0x01
 c7c:	28 2f       	mov	r18, r24
 c7e:	30 e0       	ldi	r19, 0x00	; 0
 c80:	8a 81       	ldd	r24, Y+2	; 0x02
 c82:	9b 81       	ldd	r25, Y+3	; 0x03
 c84:	fc 01       	movw	r30, r24
 c86:	e2 0f       	add	r30, r18
 c88:	f3 1f       	adc	r31, r19
 c8a:	80 81       	ld	r24, Z
 c8c:	83 32       	cpi	r24, 0x23	; 35
 c8e:	31 f7       	brne	.-52     	; 0xc5c <SPI_receiveString+0x30>
	{
		i++;
		string[i]=SPI_receiveByte();
	}
	string[i]='\0';
 c90:	89 81       	ldd	r24, Y+1	; 0x01
 c92:	28 2f       	mov	r18, r24
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	8a 81       	ldd	r24, Y+2	; 0x02
 c98:	9b 81       	ldd	r25, Y+3	; 0x03
 c9a:	fc 01       	movw	r30, r24
 c9c:	e2 0f       	add	r30, r18
 c9e:	f3 1f       	adc	r31, r19
 ca0:	10 82       	st	Z, r1
}
 ca2:	0f 90       	pop	r0
 ca4:	0f 90       	pop	r0
 ca6:	0f 90       	pop	r0
 ca8:	cf 91       	pop	r28
 caa:	df 91       	pop	r29
 cac:	1f 91       	pop	r17
 cae:	0f 91       	pop	r16
 cb0:	08 95       	ret

00000cb2 <__mulsi3>:
 cb2:	62 9f       	mul	r22, r18
 cb4:	d0 01       	movw	r26, r0
 cb6:	73 9f       	mul	r23, r19
 cb8:	f0 01       	movw	r30, r0
 cba:	82 9f       	mul	r24, r18
 cbc:	e0 0d       	add	r30, r0
 cbe:	f1 1d       	adc	r31, r1
 cc0:	64 9f       	mul	r22, r20
 cc2:	e0 0d       	add	r30, r0
 cc4:	f1 1d       	adc	r31, r1
 cc6:	92 9f       	mul	r25, r18
 cc8:	f0 0d       	add	r31, r0
 cca:	83 9f       	mul	r24, r19
 ccc:	f0 0d       	add	r31, r0
 cce:	74 9f       	mul	r23, r20
 cd0:	f0 0d       	add	r31, r0
 cd2:	65 9f       	mul	r22, r21
 cd4:	f0 0d       	add	r31, r0
 cd6:	99 27       	eor	r25, r25
 cd8:	72 9f       	mul	r23, r18
 cda:	b0 0d       	add	r27, r0
 cdc:	e1 1d       	adc	r30, r1
 cde:	f9 1f       	adc	r31, r25
 ce0:	63 9f       	mul	r22, r19
 ce2:	b0 0d       	add	r27, r0
 ce4:	e1 1d       	adc	r30, r1
 ce6:	f9 1f       	adc	r31, r25
 ce8:	bd 01       	movw	r22, r26
 cea:	cf 01       	movw	r24, r30
 cec:	11 24       	eor	r1, r1
 cee:	08 95       	ret

00000cf0 <__prologue_saves__>:
 cf0:	2f 92       	push	r2
 cf2:	3f 92       	push	r3
 cf4:	4f 92       	push	r4
 cf6:	5f 92       	push	r5
 cf8:	6f 92       	push	r6
 cfa:	7f 92       	push	r7
 cfc:	8f 92       	push	r8
 cfe:	9f 92       	push	r9
 d00:	af 92       	push	r10
 d02:	bf 92       	push	r11
 d04:	cf 92       	push	r12
 d06:	df 92       	push	r13
 d08:	ef 92       	push	r14
 d0a:	ff 92       	push	r15
 d0c:	0f 93       	push	r16
 d0e:	1f 93       	push	r17
 d10:	cf 93       	push	r28
 d12:	df 93       	push	r29
 d14:	cd b7       	in	r28, 0x3d	; 61
 d16:	de b7       	in	r29, 0x3e	; 62
 d18:	ca 1b       	sub	r28, r26
 d1a:	db 0b       	sbc	r29, r27
 d1c:	0f b6       	in	r0, 0x3f	; 63
 d1e:	f8 94       	cli
 d20:	de bf       	out	0x3e, r29	; 62
 d22:	0f be       	out	0x3f, r0	; 63
 d24:	cd bf       	out	0x3d, r28	; 61
 d26:	09 94       	ijmp

00000d28 <__epilogue_restores__>:
 d28:	2a 88       	ldd	r2, Y+18	; 0x12
 d2a:	39 88       	ldd	r3, Y+17	; 0x11
 d2c:	48 88       	ldd	r4, Y+16	; 0x10
 d2e:	5f 84       	ldd	r5, Y+15	; 0x0f
 d30:	6e 84       	ldd	r6, Y+14	; 0x0e
 d32:	7d 84       	ldd	r7, Y+13	; 0x0d
 d34:	8c 84       	ldd	r8, Y+12	; 0x0c
 d36:	9b 84       	ldd	r9, Y+11	; 0x0b
 d38:	aa 84       	ldd	r10, Y+10	; 0x0a
 d3a:	b9 84       	ldd	r11, Y+9	; 0x09
 d3c:	c8 84       	ldd	r12, Y+8	; 0x08
 d3e:	df 80       	ldd	r13, Y+7	; 0x07
 d40:	ee 80       	ldd	r14, Y+6	; 0x06
 d42:	fd 80       	ldd	r15, Y+5	; 0x05
 d44:	0c 81       	ldd	r16, Y+4	; 0x04
 d46:	1b 81       	ldd	r17, Y+3	; 0x03
 d48:	aa 81       	ldd	r26, Y+2	; 0x02
 d4a:	b9 81       	ldd	r27, Y+1	; 0x01
 d4c:	ce 0f       	add	r28, r30
 d4e:	d1 1d       	adc	r29, r1
 d50:	0f b6       	in	r0, 0x3f	; 63
 d52:	f8 94       	cli
 d54:	de bf       	out	0x3e, r29	; 62
 d56:	0f be       	out	0x3f, r0	; 63
 d58:	cd bf       	out	0x3d, r28	; 61
 d5a:	ed 01       	movw	r28, r26
 d5c:	08 95       	ret

00000d5e <_exit>:
 d5e:	f8 94       	cli

00000d60 <__stop_program>:
 d60:	ff cf       	rjmp	.-2      	; 0xd60 <__stop_program>
