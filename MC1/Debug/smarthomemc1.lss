
smarthomemc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000224  00800060  00002bfc  00002c90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800284  00800284  00002eb4  2**0
                  ALLOC
  3 .stab         00002d48  00000000  00000000  00002eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001073  00000000  00000000  00005bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a800  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000abed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 0a 	call	0x147a	; 0x147a <main>
      8a:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e4       	ldi	r26, 0x43	; 67
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e4       	ldi	r24, 0x43	; 67
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_writeByte>:
 *      Author: Mostafa
 */

#include"EEPROM.h"
void EEPROM_writeByte(uint16 addr ,uint8 data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_writeByte+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6b 83       	std	Y+3, r22	; 0x03
	while(BIT_IS_SET(EECR,EEWE));//wait until EEWE is zero
     b58:	ec e3       	ldi	r30, 0x3C	; 60
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	82 70       	andi	r24, 0x02	; 2
     b64:	90 70       	andi	r25, 0x00	; 0
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	b9 f7       	brne	.-18     	; 0xb58 <EEPROM_writeByte+0x12>
	while(BIT_IS_SET(SPMCR,SPMEN)); //wait SPMEN to be zero
     b6a:	e7 e5       	ldi	r30, 0x57	; 87
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	88 2f       	mov	r24, r24
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	81 70       	andi	r24, 0x01	; 1
     b76:	90 70       	andi	r25, 0x00	; 0
     b78:	88 23       	and	r24, r24
     b7a:	b9 f7       	brne	.-18     	; 0xb6a <EEPROM_writeByte+0x24>
	EEAR=addr;
     b7c:	ee e3       	ldi	r30, 0x3E	; 62
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	91 83       	std	Z+1, r25	; 0x01
     b86:	80 83       	st	Z, r24
	EEDR=data;
     b88:	ed e3       	ldi	r30, 0x3D	; 61
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	80 83       	st	Z, r24
	EECR=0b0100;//Write a logical one to the EEMWE bit while writing a zero to EEWE in EECR
     b90:	ec e3       	ldi	r30, 0x3C	; 60
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	84 e0       	ldi	r24, 0x04	; 4
     b96:	80 83       	st	Z, r24
	EECR=(1<<EEWE);
     b98:	ec e3       	ldi	r30, 0x3C	; 60
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	80 83       	st	Z, r24


}
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 addr)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <EEPROM_readByte+0x6>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_SET(EECR,EEWE));//wait until EEWE is zero
     bba:	ec e3       	ldi	r30, 0x3C	; 60
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	82 70       	andi	r24, 0x02	; 2
     bc6:	90 70       	andi	r25, 0x00	; 0
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	b9 f7       	brne	.-18     	; 0xbba <EEPROM_readByte+0xe>
	EEAR=addr;
     bcc:	ee e3       	ldi	r30, 0x3E	; 62
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	91 83       	std	Z+1, r25	; 0x01
     bd6:	80 83       	st	Z, r24
	EECR=(1<<EERE);
     bd8:	ec e3       	ldi	r30, 0x3C	; 60
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 83       	st	Z, r24
	return EEDR;
     be0:	ed e3       	ldi	r30, 0x3D	; 61
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z

}
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <EEPROM_writeString>:
void EEPROM_writeString(uint16 addr,uint8*str)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <EEPROM_writeString+0x6>
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <EEPROM_writeString+0x8>
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	9b 83       	std	Y+3, r25	; 0x03
     c00:	8a 83       	std	Y+2, r24	; 0x02
     c02:	7d 83       	std	Y+5, r23	; 0x05
     c04:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i =0;
     c06:	19 82       	std	Y+1, r1	; 0x01
     c08:	18 c0       	rjmp	.+48     	; 0xc3a <EEPROM_writeString+0x4a>
	while(str[i]!='\0')
	{
	EEPROM_writeByte(addr+i,str[i]);
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	9b 81       	ldd	r25, Y+3	; 0x03
     c14:	a9 01       	movw	r20, r18
     c16:	48 0f       	add	r20, r24
     c18:	59 1f       	adc	r21, r25
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	8c 81       	ldd	r24, Y+4	; 0x04
     c22:	9d 81       	ldd	r25, Y+5	; 0x05
     c24:	fc 01       	movw	r30, r24
     c26:	e2 0f       	add	r30, r18
     c28:	f3 1f       	adc	r31, r19
     c2a:	20 81       	ld	r18, Z
     c2c:	ca 01       	movw	r24, r20
     c2e:	62 2f       	mov	r22, r18
     c30:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
	i++;
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	89 83       	std	Y+1, r24	; 0x01

}
void EEPROM_writeString(uint16 addr,uint8*str)
{
	uint8 i =0;
	while(str[i]!='\0')
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	9d 81       	ldd	r25, Y+5	; 0x05
     c44:	fc 01       	movw	r30, r24
     c46:	e2 0f       	add	r30, r18
     c48:	f3 1f       	adc	r31, r19
     c4a:	80 81       	ld	r24, Z
     c4c:	88 23       	and	r24, r24
     c4e:	e9 f6       	brne	.-70     	; 0xc0a <EEPROM_writeString+0x1a>
	{
	EEPROM_writeByte(addr+i,str[i]);
	i++;
	}
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <EEPROM_readString>:

void EEPROM_readString(uint16 addr,uint8*str,uint8 size)
{
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	00 d0       	rcall	.+0      	; 0xc6a <EEPROM_readString+0xa>
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <EEPROM_readString+0xc>
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <EEPROM_readString+0xe>
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	9b 83       	std	Y+3, r25	; 0x03
     c74:	8a 83       	std	Y+2, r24	; 0x02
     c76:	7d 83       	std	Y+5, r23	; 0x05
     c78:	6c 83       	std	Y+4, r22	; 0x04
     c7a:	4e 83       	std	Y+6, r20	; 0x06
uint8 i;
for( i=0;i<size-1;i++)
     c7c:	19 82       	std	Y+1, r1	; 0x01
     c7e:	16 c0       	rjmp	.+44     	; 0xcac <EEPROM_readString+0x4c>
{
	str[i]=EEPROM_readByte(addr+i);
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	8c 01       	movw	r16, r24
     c8c:	02 0f       	add	r16, r18
     c8e:	13 1f       	adc	r17, r19
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	9b 81       	ldd	r25, Y+3	; 0x03
     c9a:	82 0f       	add	r24, r18
     c9c:	93 1f       	adc	r25, r19
     c9e:	0e 94 d6 05 	call	0xbac	; 0xbac <EEPROM_readByte>
     ca2:	f8 01       	movw	r30, r16
     ca4:	80 83       	st	Z, r24
}

void EEPROM_readString(uint16 addr,uint8*str,uint8 size)
{
uint8 i;
for( i=0;i<size-1;i++)
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	8e 81       	ldd	r24, Y+6	; 0x06
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	28 17       	cp	r18, r24
     cbc:	39 07       	cpc	r19, r25
     cbe:	04 f3       	brlt	.-64     	; 0xc80 <EEPROM_readString+0x20>
{
	str[i]=EEPROM_readByte(addr+i);

}
str[i]='\0';
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	9d 81       	ldd	r25, Y+5	; 0x05
     cca:	fc 01       	movw	r30, r24
     ccc:	e2 0f       	add	r30, r18
     cce:	f3 1f       	adc	r31, r19
     cd0:	10 82       	st	Z, r1
}
     cd2:	26 96       	adiw	r28, 0x06	; 6
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	08 95       	ret

00000ce8 <LCD_init>:
 */

#include "LCD.h"

void LCD_init()
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_DDR=0xFF;
     cf0:	e4 e3       	ldi	r30, 0x34	; 52
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	80 83       	st	Z, r24
	SET_BIT(LCD_CONTROL_DDR,LCD_ENABLE);
     cf8:	a1 e3       	ldi	r26, 0x31	; 49
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e1 e3       	ldi	r30, 0x31	; 49
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 64       	ori	r24, 0x40	; 64
     d04:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR,LCD_RW);
     d06:	a1 e3       	ldi	r26, 0x31	; 49
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e1 e3       	ldi	r30, 0x31	; 49
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 62       	ori	r24, 0x20	; 32
     d12:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR,LCD_RS);
     d14:	a1 e3       	ldi	r26, 0x31	; 49
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e1 e3       	ldi	r30, 0x31	; 49
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	80 61       	ori	r24, 0x10	; 16
     d20:	8c 93       	st	X, r24
	LCD_sendCommand(1);
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
	LCD_sendCommand(0b00001100);
     d28:	8c e0       	ldi	r24, 0x0C	; 12
     d2a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
	LCD_sendCommand(0b00111000);
     d2e:	88 e3       	ldi	r24, 0x38	; 56
     d30:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>

}
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	2f 97       	sbiw	r28, 0x0f	; 15
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
	CLR_BIT(LCD_CONTROL_PORT,LCD_RS);
     d50:	a2 e3       	ldi	r26, 0x32	; 50
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e2 e3       	ldi	r30, 0x32	; 50
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 7e       	andi	r24, 0xEF	; 239
     d5c:	8c 93       	st	X, r24
	CLR_BIT(LCD_CONTROL_PORT,LCD_RW);
     d5e:	a2 e3       	ldi	r26, 0x32	; 50
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e2 e3       	ldi	r30, 0x32	; 50
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8f 7d       	andi	r24, 0xDF	; 223
     d6a:	8c 93       	st	X, r24
	LCD_OUT_PORT=command;
     d6c:	e5 e3       	ldi	r30, 0x35	; 53
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	8f 85       	ldd	r24, Y+15	; 0x0f
     d72:	80 83       	st	Z, r24
	SET_BIT(LCD_CONTROL_PORT,LCD_ENABLE);
     d74:	a2 e3       	ldi	r26, 0x32	; 50
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e2 e3       	ldi	r30, 0x32	; 50
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 64       	ori	r24, 0x40	; 64
     d80:	8c 93       	st	X, r24
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a0 e8       	ldi	r26, 0x80	; 128
     d88:	bf e3       	ldi	r27, 0x3F	; 63
     d8a:	8b 87       	std	Y+11, r24	; 0x0b
     d8c:	9c 87       	std	Y+12, r25	; 0x0c
     d8e:	ad 87       	std	Y+13, r26	; 0x0d
     d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d92:	6b 85       	ldd	r22, Y+11	; 0x0b
     d94:	7c 85       	ldd	r23, Y+12	; 0x0c
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	4a e7       	ldi	r20, 0x7A	; 122
     da0:	53 e4       	ldi	r21, 0x43	; 67
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	8f 83       	std	Y+7, r24	; 0x07
     dac:	98 87       	std	Y+8, r25	; 0x08
     dae:	a9 87       	std	Y+9, r26	; 0x09
     db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     db2:	6f 81       	ldd	r22, Y+7	; 0x07
     db4:	78 85       	ldd	r23, Y+8	; 0x08
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e8       	ldi	r20, 0x80	; 128
     dc0:	5f e3       	ldi	r21, 0x3F	; 63
     dc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc6:	88 23       	and	r24, r24
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <LCD_sendCommand+0x9a>
		__ticks = 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <LCD_sendCommand+0x118>
	else if (__tmp > 65535)
     dd4:	6f 81       	ldd	r22, Y+7	; 0x07
     dd6:	78 85       	ldd	r23, Y+8	; 0x08
     dd8:	89 85       	ldd	r24, Y+9	; 0x09
     dda:	9a 85       	ldd	r25, Y+10	; 0x0a
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	3f ef       	ldi	r19, 0xFF	; 255
     de0:	4f e7       	ldi	r20, 0x7F	; 127
     de2:	57 e4       	ldi	r21, 0x47	; 71
     de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de8:	18 16       	cp	r1, r24
     dea:	4c f5       	brge	.+82     	; 0xe3e <LCD_sendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dec:	6b 85       	ldd	r22, Y+11	; 0x0b
     dee:	7c 85       	ldd	r23, Y+12	; 0x0c
     df0:	8d 85       	ldd	r24, Y+13	; 0x0d
     df2:	9e 85       	ldd	r25, Y+14	; 0x0e
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e2       	ldi	r20, 0x20	; 32
     dfa:	51 e4       	ldi	r21, 0x41	; 65
     dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	bc 01       	movw	r22, r24
     e06:	cd 01       	movw	r24, r26
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	0f c0       	rjmp	.+30     	; 0xe34 <LCD_sendCommand+0xfa>
     e16:	89 e1       	ldi	r24, 0x19	; 25
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <LCD_sendCommand+0xe8>
     e26:	9c 83       	std	Y+4, r25	; 0x04
     e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
     e2c:	9e 81       	ldd	r25, Y+6	; 0x06
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	9e 81       	ldd	r25, Y+6	; 0x06
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	69 f7       	brne	.-38     	; 0xe16 <LCD_sendCommand+0xdc>
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <LCD_sendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	9e 83       	std	Y+6, r25	; 0x06
     e50:	8d 83       	std	Y+5, r24	; 0x05
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <LCD_sendCommand+0x124>
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLR_BIT(LCD_CONTROL_PORT,LCD_ENABLE);
     e66:	a2 e3       	ldi	r26, 0x32	; 50
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e2 e3       	ldi	r30, 0x32	; 50
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8f 7b       	andi	r24, 0xBF	; 191
     e72:	8c 93       	st	X, r24


}
     e74:	2f 96       	adiw	r28, 0x0f	; 15
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 c)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	2f 97       	sbiw	r28, 0x0f	; 15
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	8f 87       	std	Y+15, r24	; 0x0f
	SET_BIT(LCD_CONTROL_PORT,LCD_RS);
     e9c:	a2 e3       	ldi	r26, 0x32	; 50
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e2 e3       	ldi	r30, 0x32	; 50
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 61       	ori	r24, 0x10	; 16
     ea8:	8c 93       	st	X, r24
	CLR_BIT(LCD_CONTROL_PORT,LCD_RW);
     eaa:	a2 e3       	ldi	r26, 0x32	; 50
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e2 e3       	ldi	r30, 0x32	; 50
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7d       	andi	r24, 0xDF	; 223
     eb6:	8c 93       	st	X, r24
	LCD_OUT_PORT=c;
     eb8:	e5 e3       	ldi	r30, 0x35	; 53
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ebe:	80 83       	st	Z, r24
	SET_BIT(LCD_CONTROL_PORT,LCD_ENABLE);
     ec0:	a2 e3       	ldi	r26, 0x32	; 50
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e2 e3       	ldi	r30, 0x32	; 50
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 64       	ori	r24, 0x40	; 64
     ecc:	8c 93       	st	X, r24
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a0 e8       	ldi	r26, 0x80	; 128
     ed4:	bf e3       	ldi	r27, 0x3F	; 63
     ed6:	8b 87       	std	Y+11, r24	; 0x0b
     ed8:	9c 87       	std	Y+12, r25	; 0x0c
     eda:	ad 87       	std	Y+13, r26	; 0x0d
     edc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ede:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a e7       	ldi	r20, 0x7A	; 122
     eec:	53 e4       	ldi	r21, 0x43	; 67
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	8f 83       	std	Y+7, r24	; 0x07
     ef8:	98 87       	std	Y+8, r25	; 0x08
     efa:	a9 87       	std	Y+9, r26	; 0x09
     efc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e8       	ldi	r20, 0x80	; 128
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f12:	88 23       	and	r24, r24
     f14:	2c f4       	brge	.+10     	; 0xf20 <LCD_displayCharacter+0x9a>
		__ticks = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	3f c0       	rjmp	.+126    	; 0xf9e <LCD_displayCharacter+0x118>
	else if (__tmp > 65535)
     f20:	6f 81       	ldd	r22, Y+7	; 0x07
     f22:	78 85       	ldd	r23, Y+8	; 0x08
     f24:	89 85       	ldd	r24, Y+9	; 0x09
     f26:	9a 85       	ldd	r25, Y+10	; 0x0a
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	3f ef       	ldi	r19, 0xFF	; 255
     f2c:	4f e7       	ldi	r20, 0x7F	; 127
     f2e:	57 e4       	ldi	r21, 0x47	; 71
     f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f34:	18 16       	cp	r1, r24
     f36:	4c f5       	brge	.+82     	; 0xf8a <LCD_displayCharacter+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f38:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e2       	ldi	r20, 0x20	; 32
     f46:	51 e4       	ldi	r21, 0x41	; 65
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <LCD_displayCharacter+0xfa>
     f62:	89 e1       	ldi	r24, 0x19	; 25
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <LCD_displayCharacter+0xe8>
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	69 f7       	brne	.-38     	; 0xf62 <LCD_displayCharacter+0xdc>
     f88:	14 c0       	rjmp	.+40     	; 0xfb2 <LCD_displayCharacter+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	6f 81       	ldd	r22, Y+7	; 0x07
     f8c:	78 85       	ldd	r23, Y+8	; 0x08
     f8e:	89 85       	ldd	r24, Y+9	; 0x09
     f90:	9a 85       	ldd	r25, Y+10	; 0x0a
     f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	9e 83       	std	Y+6, r25	; 0x06
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <LCD_displayCharacter+0x124>
     fae:	9a 83       	std	Y+2, r25	; 0x02
     fb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLR_BIT(LCD_CONTROL_PORT,LCD_ENABLE);
     fb2:	a2 e3       	ldi	r26, 0x32	; 50
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e2 e3       	ldi	r30, 0x32	; 50
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7b       	andi	r24, 0xBF	; 191
     fbe:	8c 93       	st	X, r24

}
     fc0:	2f 96       	adiw	r28, 0x0f	; 15
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <LCD_displayString>:
void LCD_displayString(uint8* c)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <LCD_displayString+0x6>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	0a c0       	rjmp	.+20     	; 0xff6 <LCD_displayString+0x24>
	while((*c)!='\0')
	{
		LCD_displayCharacter(*c);
     fe2:	e9 81       	ldd	r30, Y+1	; 0x01
     fe4:	fa 81       	ldd	r31, Y+2	; 0x02
     fe6:	80 81       	ld	r24, Z
     fe8:	0e 94 43 07 	call	0xe86	; 0xe86 <LCD_displayCharacter>
		c++;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LCD_CONTROL_PORT,LCD_ENABLE);

}
void LCD_displayString(uint8* c)
{
	while((*c)!='\0')
     ff6:	e9 81       	ldd	r30, Y+1	; 0x01
     ff8:	fa 81       	ldd	r31, Y+2	; 0x02
     ffa:	80 81       	ld	r24, Z
     ffc:	88 23       	and	r24, r24
     ffe:	89 f7       	brne	.-30     	; 0xfe2 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*c);
		c++;
	}
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <LCD_goToRowColumn+0x6>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <LCD_goToRowColumn+0x8>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	8a 83       	std	Y+2, r24	; 0x02
    101a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address=col;
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3d 83       	std	Y+5, r19	; 0x05
    1028:	2c 83       	std	Y+4, r18	; 0x04
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	31 f0       	breq	.+12     	; 0x103e <LCD_goToRowColumn+0x34>
    1032:	2c 81       	ldd	r18, Y+4	; 0x04
    1034:	3d 81       	ldd	r19, Y+5	; 0x05
    1036:	21 30       	cpi	r18, 0x01	; 1
    1038:	31 05       	cpc	r19, r1
    103a:	21 f0       	breq	.+8      	; 0x1044 <LCD_goToRowColumn+0x3a>
    103c:	06 c0       	rjmp	.+12     	; 0x104a <LCD_goToRowColumn+0x40>
	{
	case(0):
			address=col;
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	03 c0       	rjmp	.+6      	; 0x104a <LCD_goToRowColumn+0x40>
	break;
	case(1):
			address=col+0x40;
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	80 5c       	subi	r24, 0xC0	; 192
    1048:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	LCD_sendCommand(address|0b10000000);
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	80 68       	ori	r24, 0x80	; 128
    104e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 *c,uint8 row,uint8 col)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <LCD_displayStringRowColumn+0x6>
    1068:	00 d0       	rcall	.+0      	; 0x106a <LCD_displayStringRowColumn+0x8>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	6b 83       	std	Y+3, r22	; 0x03
    1074:	4c 83       	std	Y+4, r20	; 0x04
	LCD_goToRowColumn(row,col);
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	6c 81       	ldd	r22, Y+4	; 0x04
    107a:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
	LCD_displayString(c);
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <LCD_clearScreen>:
void LCD_clearScreen()
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(1);
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
}
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <LCD_intgerToString>:
void LCD_intgerToString(long num)
{
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	60 97       	sbiw	r28, 0x10	; 16
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	6d 87       	std	Y+13, r22	; 0x0d
    10c2:	7e 87       	std	Y+14, r23	; 0x0e
    10c4:	8f 87       	std	Y+15, r24	; 0x0f
    10c6:	98 8b       	std	Y+16, r25	; 0x10
	char str[11];
	uint8 i=0;
    10c8:	19 82       	std	Y+1, r1	; 0x01
	if(num<0)
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	af 85       	ldd	r26, Y+15	; 0x0f
    10d0:	b8 89       	ldd	r27, Y+16	; 0x10
    10d2:	bb 23       	and	r27, r27
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <LCD_intgerToString+0x30>
    10d6:	41 c0       	rjmp	.+130    	; 0x115a <LCD_intgerToString+0xb2>
		{
		LCD_displayCharacter('-');
    10d8:	8d e2       	ldi	r24, 0x2D	; 45
    10da:	0e 94 43 07 	call	0xe86	; 0xe86 <LCD_displayCharacter>
		num=-num;
    10de:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e2:	af 85       	ldd	r26, Y+15	; 0x0f
    10e4:	b8 89       	ldd	r27, Y+16	; 0x10
    10e6:	b0 95       	com	r27
    10e8:	a0 95       	com	r26
    10ea:	90 95       	com	r25
    10ec:	81 95       	neg	r24
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	af 4f       	sbci	r26, 0xFF	; 255
    10f2:	bf 4f       	sbci	r27, 0xFF	; 255
    10f4:	8d 87       	std	Y+13, r24	; 0x0d
    10f6:	9e 87       	std	Y+14, r25	; 0x0e
    10f8:	af 87       	std	Y+15, r26	; 0x0f
    10fa:	b8 8b       	std	Y+16, r27	; 0x10
    10fc:	2e c0       	rjmp	.+92     	; 0x115a <LCD_intgerToString+0xb2>
		}
	while(num)
	{
		str[i]=(num%10)+48;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	08 2f       	mov	r16, r24
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	8d 85       	ldd	r24, Y+13	; 0x0d
    1106:	9e 85       	ldd	r25, Y+14	; 0x0e
    1108:	af 85       	ldd	r26, Y+15	; 0x0f
    110a:	b8 89       	ldd	r27, Y+16	; 0x10
    110c:	2a e0       	ldi	r18, 0x0A	; 10
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodsi4>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	28 2f       	mov	r18, r24
    1122:	20 5d       	subi	r18, 0xD0	; 208
    1124:	ce 01       	movw	r24, r28
    1126:	02 96       	adiw	r24, 0x02	; 2
    1128:	fc 01       	movw	r30, r24
    112a:	e0 0f       	add	r30, r16
    112c:	f1 1f       	adc	r31, r17
    112e:	20 83       	st	Z, r18
		num=num/10;
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	af 85       	ldd	r26, Y+15	; 0x0f
    1136:	b8 89       	ldd	r27, Y+16	; 0x10
    1138:	2a e0       	ldi	r18, 0x0A	; 10
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divmodsi4>
    1148:	da 01       	movw	r26, r20
    114a:	c9 01       	movw	r24, r18
    114c:	8d 87       	std	Y+13, r24	; 0x0d
    114e:	9e 87       	std	Y+14, r25	; 0x0e
    1150:	af 87       	std	Y+15, r26	; 0x0f
    1152:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	89 83       	std	Y+1, r24	; 0x01
	if(num<0)
		{
		LCD_displayCharacter('-');
		num=-num;
		}
	while(num)
    115a:	8d 85       	ldd	r24, Y+13	; 0x0d
    115c:	9e 85       	ldd	r25, Y+14	; 0x0e
    115e:	af 85       	ldd	r26, Y+15	; 0x0f
    1160:	b8 89       	ldd	r27, Y+16	; 0x10
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	a1 05       	cpc	r26, r1
    1166:	b1 05       	cpc	r27, r1
    1168:	51 f6       	brne	.-108    	; 0x10fe <LCD_intgerToString+0x56>
    116a:	11 c0       	rjmp	.+34     	; 0x118e <LCD_intgerToString+0xe6>
		num=num/10;
		i++;
	}
	while(i>0)
	{
		LCD_displayCharacter(str[i-1]);
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9c 01       	movw	r18, r24
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	30 40       	sbci	r19, 0x00	; 0
    1178:	ce 01       	movw	r24, r28
    117a:	02 96       	adiw	r24, 0x02	; 2
    117c:	fc 01       	movw	r30, r24
    117e:	e2 0f       	add	r30, r18
    1180:	f3 1f       	adc	r31, r19
    1182:	80 81       	ld	r24, Z
    1184:	0e 94 43 07 	call	0xe86	; 0xe86 <LCD_displayCharacter>
		i--;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	81 50       	subi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01
	{
		str[i]=(num%10)+48;
		num=num/10;
		i++;
	}
	while(i>0)
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	88 23       	and	r24, r24
    1192:	61 f7       	brne	.-40     	; 0x116c <LCD_intgerToString+0xc4>
	{
		LCD_displayCharacter(str[i-1]);
		i--;
	}
}
    1194:	60 96       	adiw	r28, 0x10	; 16
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	08 95       	ret

000011aa <keypad_getPressedKey>:
 */

#include"keypad.h"

uint8 keypad_getPressedKey()
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <keypad_getPressedKey+0x6>
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_DIRECTION_REG=0x00;
    11b4:	ea e3       	ldi	r30, 0x3A	; 58
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	10 82       	st	Z, r1
#ifdef keypad4x4
	KEYPAD_OUT_PORT=0xf0;
    11ba:	eb e3       	ldi	r30, 0x3B	; 59
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 ef       	ldi	r24, 0xF0	; 240
    11c0:	80 83       	st	Z, r24
#else
	KEYPAD_OUT_PORT=0x80;
#endif
	uint8 i,j=0;
    11c2:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
	for(i=0;i<4;i++)
    11c4:	1a 82       	std	Y+2, r1	; 0x02
    11c6:	3f c0       	rjmp	.+126    	; 0x1246 <keypad_getPressedKey+0x9c>
	{
		KEYPAD_DIRECTION_REG=(1<<i);
    11c8:	ea e3       	ldi	r30, 0x3A	; 58
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <keypad_getPressedKey+0x34>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <keypad_getPressedKey+0x30>
    11e2:	80 83       	st	Z, r24
		#ifdef keypad4x4
			for(j=0;j<4;j++)
    11e4:	19 82       	std	Y+1, r1	; 0x01
    11e6:	29 c0       	rjmp	.+82     	; 0x123a <keypad_getPressedKey+0x90>
		#else
			for(j=0;j<3;j++)
		#endif
			{
				if(BIT_IS_CLR(KEYPAD_IN_PORT,j+4))
    11e8:	e9 e3       	ldi	r30, 0x39	; 57
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	04 96       	adiw	r24, 0x04	; 4
    11fa:	a9 01       	movw	r20, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <keypad_getPressedKey+0x58>
    11fe:	55 95       	asr	r21
    1200:	47 95       	ror	r20
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <keypad_getPressedKey+0x54>
    1206:	ca 01       	movw	r24, r20
    1208:	81 70       	andi	r24, 0x01	; 1
    120a:	90 70       	andi	r25, 0x00	; 0
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	91 f4       	brne	.+36     	; 0x1234 <keypad_getPressedKey+0x8a>
				{
			#ifdef keypad4x4
					return keyPad_4x4_adjSwitchNumber(i*4+j+1);
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	98 2f       	mov	r25, r24
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	89 0f       	add	r24, r25
    1224:	8f 5f       	subi	r24, 0xFF	; 255
    1226:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <keyPad_4x4_adjSwitchNumber>
				}
			}
	}
	}
	return -1;
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret
	{
	for(i=0;i<4;i++)
	{
		KEYPAD_DIRECTION_REG=(1<<i);
		#ifdef keypad4x4
			for(j=0;j<4;j++)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	a0 f2       	brcs	.-88     	; 0x11e8 <keypad_getPressedKey+0x3e>
	KEYPAD_OUT_PORT=0x80;
#endif
	uint8 i,j=0;
	while(1)
	{
	for(i=0;i<4;i++)
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	8a 83       	std	Y+2, r24	; 0x02
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	08 f4       	brcc	.+2      	; 0x124e <keypad_getPressedKey+0xa4>
    124c:	bd cf       	rjmp	.-134    	; 0x11c8 <keypad_getPressedKey+0x1e>
    124e:	ba cf       	rjmp	.-140    	; 0x11c4 <keypad_getPressedKey+0x1a>

00001250 <keypad_4x3_adjSwitchNumber>:
	}
	return -1;
}

uint8 keypad_4x3_adjSwitchNumber(uint8 key)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <keypad_4x3_adjSwitchNumber+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <keypad_4x3_adjSwitchNumber+0x8>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
	switch(key)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3c 83       	std	Y+4, r19	; 0x04
    1266:	2b 83       	std	Y+3, r18	; 0x03
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	8a 30       	cpi	r24, 0x0A	; 10
    126e:	91 05       	cpc	r25, r1
    1270:	81 f0       	breq	.+32     	; 0x1292 <keypad_4x3_adjSwitchNumber+0x42>
    1272:	2b 81       	ldd	r18, Y+3	; 0x03
    1274:	3c 81       	ldd	r19, Y+4	; 0x04
    1276:	2a 30       	cpi	r18, 0x0A	; 10
    1278:	31 05       	cpc	r19, r1
    127a:	a4 f0       	brlt	.+40     	; 0x12a4 <keypad_4x3_adjSwitchNumber+0x54>
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	8b 30       	cpi	r24, 0x0B	; 11
    1282:	91 05       	cpc	r25, r1
    1284:	49 f0       	breq	.+18     	; 0x1298 <keypad_4x3_adjSwitchNumber+0x48>
    1286:	2b 81       	ldd	r18, Y+3	; 0x03
    1288:	3c 81       	ldd	r19, Y+4	; 0x04
    128a:	2c 30       	cpi	r18, 0x0C	; 12
    128c:	31 05       	cpc	r19, r1
    128e:	39 f0       	breq	.+14     	; 0x129e <keypad_4x3_adjSwitchNumber+0x4e>
    1290:	09 c0       	rjmp	.+18     	; 0x12a4 <keypad_4x3_adjSwitchNumber+0x54>
	{
	case(10):
			return '*';
    1292:	3a e2       	ldi	r19, 0x2A	; 42
    1294:	3a 83       	std	Y+2, r19	; 0x02
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <keypad_4x3_adjSwitchNumber+0x58>
			break;
	case(11):
			return '0';
    1298:	80 e3       	ldi	r24, 0x30	; 48
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	05 c0       	rjmp	.+10     	; 0x12a8 <keypad_4x3_adjSwitchNumber+0x58>
			break;
	case(12):
			return'#';
    129e:	93 e2       	ldi	r25, 0x23	; 35
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <keypad_4x3_adjSwitchNumber+0x58>
			break;
	default:
		return key;
    12a4:	29 81       	ldd	r18, Y+1	; 0x01
    12a6:	2a 83       	std	Y+2, r18	; 0x02
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
return -1;
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <keyPad_4x4_adjSwitchNumber>:
uint8 keyPad_4x4_adjSwitchNumber(uint8 key)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <keyPad_4x4_adjSwitchNumber+0x6>
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <keyPad_4x4_adjSwitchNumber+0x8>
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
switch(key)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3c 83       	std	Y+4, r19	; 0x04
    12ce:	2b 83       	std	Y+3, r18	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	88 30       	cpi	r24, 0x08	; 8
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <keyPad_4x4_adjSwitchNumber+0x24>
    12da:	70 c0       	rjmp	.+224    	; 0x13bc <keyPad_4x4_adjSwitchNumber+0x104>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	29 30       	cpi	r18, 0x09	; 9
    12e2:	31 05       	cpc	r19, r1
    12e4:	5c f5       	brge	.+86     	; 0x133c <keyPad_4x4_adjSwitchNumber+0x84>
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	84 30       	cpi	r24, 0x04	; 4
    12ec:	91 05       	cpc	r25, r1
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <keyPad_4x4_adjSwitchNumber+0x3a>
    12f0:	59 c0       	rjmp	.+178    	; 0x13a4 <keyPad_4x4_adjSwitchNumber+0xec>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	25 30       	cpi	r18, 0x05	; 5
    12f8:	31 05       	cpc	r19, r1
    12fa:	9c f4       	brge	.+38     	; 0x1322 <keyPad_4x4_adjSwitchNumber+0x6a>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	91 05       	cpc	r25, r1
    1304:	09 f4       	brne	.+2      	; 0x1308 <keyPad_4x4_adjSwitchNumber+0x50>
    1306:	48 c0       	rjmp	.+144    	; 0x1398 <keyPad_4x4_adjSwitchNumber+0xe0>
    1308:	2b 81       	ldd	r18, Y+3	; 0x03
    130a:	3c 81       	ldd	r19, Y+4	; 0x04
    130c:	23 30       	cpi	r18, 0x03	; 3
    130e:	31 05       	cpc	r19, r1
    1310:	0c f0       	brlt	.+2      	; 0x1314 <keyPad_4x4_adjSwitchNumber+0x5c>
    1312:	45 c0       	rjmp	.+138    	; 0x139e <keyPad_4x4_adjSwitchNumber+0xe6>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <keyPad_4x4_adjSwitchNumber+0x68>
    131e:	39 c0       	rjmp	.+114    	; 0x1392 <keyPad_4x4_adjSwitchNumber+0xda>
    1320:	68 c0       	rjmp	.+208    	; 0x13f2 <keyPad_4x4_adjSwitchNumber+0x13a>
    1322:	2b 81       	ldd	r18, Y+3	; 0x03
    1324:	3c 81       	ldd	r19, Y+4	; 0x04
    1326:	26 30       	cpi	r18, 0x06	; 6
    1328:	31 05       	cpc	r19, r1
    132a:	09 f4       	brne	.+2      	; 0x132e <keyPad_4x4_adjSwitchNumber+0x76>
    132c:	41 c0       	rjmp	.+130    	; 0x13b0 <keyPad_4x4_adjSwitchNumber+0xf8>
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	87 30       	cpi	r24, 0x07	; 7
    1334:	91 05       	cpc	r25, r1
    1336:	0c f0       	brlt	.+2      	; 0x133a <keyPad_4x4_adjSwitchNumber+0x82>
    1338:	3e c0       	rjmp	.+124    	; 0x13b6 <keyPad_4x4_adjSwitchNumber+0xfe>
    133a:	37 c0       	rjmp	.+110    	; 0x13aa <keyPad_4x4_adjSwitchNumber+0xf2>
    133c:	2b 81       	ldd	r18, Y+3	; 0x03
    133e:	3c 81       	ldd	r19, Y+4	; 0x04
    1340:	2c 30       	cpi	r18, 0x0C	; 12
    1342:	31 05       	cpc	r19, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <keyPad_4x4_adjSwitchNumber+0x90>
    1346:	46 c0       	rjmp	.+140    	; 0x13d4 <keyPad_4x4_adjSwitchNumber+0x11c>
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	8d 30       	cpi	r24, 0x0D	; 13
    134e:	91 05       	cpc	r25, r1
    1350:	5c f4       	brge	.+22     	; 0x1368 <keyPad_4x4_adjSwitchNumber+0xb0>
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	2a 30       	cpi	r18, 0x0A	; 10
    1358:	31 05       	cpc	r19, r1
    135a:	b1 f1       	breq	.+108    	; 0x13c8 <keyPad_4x4_adjSwitchNumber+0x110>
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	8b 30       	cpi	r24, 0x0B	; 11
    1362:	91 05       	cpc	r25, r1
    1364:	a4 f5       	brge	.+104    	; 0x13ce <keyPad_4x4_adjSwitchNumber+0x116>
    1366:	2d c0       	rjmp	.+90     	; 0x13c2 <keyPad_4x4_adjSwitchNumber+0x10a>
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	2e 30       	cpi	r18, 0x0E	; 14
    136e:	31 05       	cpc	r19, r1
    1370:	b9 f1       	breq	.+110    	; 0x13e0 <keyPad_4x4_adjSwitchNumber+0x128>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	8e 30       	cpi	r24, 0x0E	; 14
    1378:	91 05       	cpc	r25, r1
    137a:	7c f1       	brlt	.+94     	; 0x13da <keyPad_4x4_adjSwitchNumber+0x122>
    137c:	2b 81       	ldd	r18, Y+3	; 0x03
    137e:	3c 81       	ldd	r19, Y+4	; 0x04
    1380:	2f 30       	cpi	r18, 0x0F	; 15
    1382:	31 05       	cpc	r19, r1
    1384:	81 f1       	breq	.+96     	; 0x13e6 <keyPad_4x4_adjSwitchNumber+0x12e>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	80 31       	cpi	r24, 0x10	; 16
    138c:	91 05       	cpc	r25, r1
    138e:	71 f1       	breq	.+92     	; 0x13ec <keyPad_4x4_adjSwitchNumber+0x134>
    1390:	30 c0       	rjmp	.+96     	; 0x13f2 <keyPad_4x4_adjSwitchNumber+0x13a>
{
case(1):
		return '7';
    1392:	97 e3       	ldi	r25, 0x37	; 55
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	2f c0       	rjmp	.+94     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(2):
		return '8';
    1398:	28 e3       	ldi	r18, 0x38	; 56
    139a:	2a 83       	std	Y+2, r18	; 0x02
    139c:	2c c0       	rjmp	.+88     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(3):
		return '9';
    139e:	39 e3       	ldi	r19, 0x39	; 57
    13a0:	3a 83       	std	Y+2, r19	; 0x02
    13a2:	29 c0       	rjmp	.+82     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(4):
		return'/';
    13a4:	8f e2       	ldi	r24, 0x2F	; 47
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	26 c0       	rjmp	.+76     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(5):
		return '4';
    13aa:	94 e3       	ldi	r25, 0x34	; 52
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	23 c0       	rjmp	.+70     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(6):
		return '5';
    13b0:	25 e3       	ldi	r18, 0x35	; 53
    13b2:	2a 83       	std	Y+2, r18	; 0x02
    13b4:	20 c0       	rjmp	.+64     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(7):
		return '6';
    13b6:	36 e3       	ldi	r19, 0x36	; 54
    13b8:	3a 83       	std	Y+2, r19	; 0x02
    13ba:	1d c0       	rjmp	.+58     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(8):
		return 'x';
    13bc:	88 e7       	ldi	r24, 0x78	; 120
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	1a c0       	rjmp	.+52     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(9):
		return '1';
    13c2:	91 e3       	ldi	r25, 0x31	; 49
    13c4:	9a 83       	std	Y+2, r25	; 0x02
    13c6:	17 c0       	rjmp	.+46     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(10):
		return '2';
    13c8:	22 e3       	ldi	r18, 0x32	; 50
    13ca:	2a 83       	std	Y+2, r18	; 0x02
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(11):
		return '3';
    13ce:	33 e3       	ldi	r19, 0x33	; 51
    13d0:	3a 83       	std	Y+2, r19	; 0x02
    13d2:	11 c0       	rjmp	.+34     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(12):
		return '-';
    13d4:	8d e2       	ldi	r24, 0x2D	; 45
    13d6:	8a 83       	std	Y+2, r24	; 0x02
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(13):
		return 'c';
    13da:	93 e6       	ldi	r25, 0x63	; 99
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(14):
		return '0';
    13e0:	20 e3       	ldi	r18, 0x30	; 48
    13e2:	2a 83       	std	Y+2, r18	; 0x02
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(15):
		return '=';
    13e6:	3d e3       	ldi	r19, 0x3D	; 61
    13e8:	3a 83       	std	Y+2, r19	; 0x02
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
case(16):
		return'+';
    13ec:	8b e2       	ldi	r24, 0x2B	; 43
    13ee:	8a 83       	std	Y+2, r24	; 0x02
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <keyPad_4x4_adjSwitchNumber+0x13e>
		break;
default:
	return key;
    13f2:	99 81       	ldd	r25, Y+1	; 0x01
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
	break;
}
return -1;
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <setCommStringFlags>:
#include "LCD.h"
#include <string.h>
#include "menus.h"


setCommStringFlags(char commString[]){
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <setCommStringFlags+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <setCommStringFlags+0x8>
    140e:	0f 92       	push	r0
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	9b 83       	std	Y+3, r25	; 0x03
    1416:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0;i<5;i++)
    1418:	19 82       	std	Y+1, r1	; 0x01
    141a:	14 c0       	rjmp	.+40     	; 0x1444 <setCommStringFlags+0x3e>
	{
		roomsStatus[i]=commString[i]-'0';
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	48 2f       	mov	r20, r24
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	9b 81       	ldd	r25, Y+3	; 0x03
    142c:	fc 01       	movw	r30, r24
    142e:	e2 0f       	add	r30, r18
    1430:	f3 1f       	adc	r31, r19
    1432:	80 81       	ld	r24, Z
    1434:	80 53       	subi	r24, 0x30	; 48
    1436:	fa 01       	movw	r30, r20
    1438:	ea 57       	subi	r30, 0x7A	; 122
    143a:	fd 4f       	sbci	r31, 0xFD	; 253
    143c:	80 83       	st	Z, r24
#include <string.h>
#include "menus.h"


setCommStringFlags(char commString[]){
	for(uint8 i=0;i<5;i++)
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	85 30       	cpi	r24, 0x05	; 5
    1448:	48 f3       	brcs	.-46     	; 0x141c <setCommStringFlags+0x16>
	{
		roomsStatus[i]=commString[i]-'0';

	}
	airCond=commString[COMM_STR_AIRCOND_POS]-'0';
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	fc 01       	movw	r30, r24
    1450:	35 96       	adiw	r30, 0x05	; 5
    1452:	80 81       	ld	r24, Z
    1454:	80 53       	subi	r24, 0x30	; 48
    1456:	80 93 85 02 	sts	0x0285, r24
	airCondSetValue=commString[COMM_STR_AIRCOND_VALUE_POS]-'0';
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	9b 81       	ldd	r25, Y+3	; 0x03
    145e:	fc 01       	movw	r30, r24
    1460:	36 96       	adiw	r30, 0x06	; 6
    1462:	80 81       	ld	r24, Z
    1464:	80 53       	subi	r24, 0x30	; 48
    1466:	80 93 6f 02 	sts	0x026F, r24
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <main>:

int main(void)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	a7 97       	sbiw	r28, 0x27	; 39
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
	/*INTIALIZATIONS------------------------*/
	LCD_init();
    148e:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_init>
	SPI_initMaster();
    1492:	0e 94 6f 14 	call	0x28de	; 0x28de <SPI_initMaster>
	/*-------------------------------------------*/

	/*CHECK FOR BLOCK MODE---------------------*/
	uint8 blockFlag=EEPROM_readByte(BLOCK_FLAG_ADRR);
    1496:	80 e3       	ldi	r24, 0x30	; 48
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 d6 05 	call	0xbac	; 0xbac <EEPROM_readByte>
    149e:	8e 8f       	std	Y+30, r24	; 0x1e
	if(!blockFlag)
    14a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14a2:	88 23       	and	r24, r24
    14a4:	31 f4       	brne	.+12     	; 0x14b2 <main+0x38>
	{
		currentScreen=blockScreen;
    14a6:	86 e0       	ldi	r24, 0x06	; 6
    14a8:	80 93 84 02 	sts	0x0284, r24
		statusFlag=blockS;
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	80 93 70 02 	sts	0x0270, r24
	}
	/*------------------------------------------*/
	/*CHECK FOR FIRST START-------------------------*/
		uint8 firstStartFlag=EEPROM_readByte(FIRSTSTARTADD);
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 d6 05 	call	0xbac	; 0xbac <EEPROM_readByte>
    14ba:	8d 8f       	std	Y+29, r24	; 0x1d
		if (firstStartFlag)
    14bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14be:	88 23       	and	r24, r24
    14c0:	11 f0       	breq	.+4      	; 0x14c6 <main+0x4c>
		{
			firstStart_func();
    14c2:	0e 94 b2 13 	call	0x2764	; 0x2764 <firstStart_func>
						aircondvalue,
						endOFstring,
						null
						*/

	EEPROM_readString(COMM_STR_ADDR,commString,9); // read comm string from EEPROM after restart
    14c6:	9e 01       	movw	r18, r28
    14c8:	21 5e       	subi	r18, 0xE1	; 225
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	80 e5       	ldi	r24, 0x50	; 80
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	b9 01       	movw	r22, r18
    14d2:	49 e0       	ldi	r20, 0x09	; 9
    14d4:	0e 94 30 06 	call	0xc60	; 0xc60 <EEPROM_readString>
	setCommStringFlags(commString); //set flags variables in MC after reading the stored string from EEPROM
    14d8:	ce 01       	movw	r24, r28
    14da:	4f 96       	adiw	r24, 0x1f	; 31
    14dc:	0e 94 03 0a 	call	0x1406	; 0x1406 <setCommStringFlags>
	SPI_sendString(commString); // send comm string to 2nd MC after reboot
    14e0:	ce 01       	movw	r24, r28
    14e2:	4f 96       	adiw	r24, 0x1f	; 31
    14e4:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <SPI_sendString>

	/*LCD WELCOME DISPLAY AFTER REBOOT-------------------*/
	LCD_sendCommand(CLR_SCREEN);
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
	LCD_displayString("   Welcome to ");
    14ee:	80 e6       	ldi	r24, 0x60	; 96
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
	LCD_displayString("   SMART Home");
    14fe:	8f e6       	ldi	r24, 0x6F	; 111
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	aa ef       	ldi	r26, 0xFA	; 250
    150c:	b3 e4       	ldi	r27, 0x43	; 67
    150e:	89 8f       	std	Y+25, r24	; 0x19
    1510:	9a 8f       	std	Y+26, r25	; 0x1a
    1512:	ab 8f       	std	Y+27, r26	; 0x1b
    1514:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	69 8d       	ldd	r22, Y+25	; 0x19
    1518:	7a 8d       	ldd	r23, Y+26	; 0x1a
    151a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a e7       	ldi	r20, 0x7A	; 122
    1524:	53 e4       	ldi	r21, 0x43	; 67
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8d 8b       	std	Y+21, r24	; 0x15
    1530:	9e 8b       	std	Y+22, r25	; 0x16
    1532:	af 8b       	std	Y+23, r26	; 0x17
    1534:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1536:	6d 89       	ldd	r22, Y+21	; 0x15
    1538:	7e 89       	ldd	r23, Y+22	; 0x16
    153a:	8f 89       	ldd	r24, Y+23	; 0x17
    153c:	98 8d       	ldd	r25, Y+24	; 0x18
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <main+0xde>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9c 8b       	std	Y+20, r25	; 0x14
    1554:	8b 8b       	std	Y+19, r24	; 0x13
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <main+0x15c>
	else if (__tmp > 65535)
    1558:	6d 89       	ldd	r22, Y+21	; 0x15
    155a:	7e 89       	ldd	r23, Y+22	; 0x16
    155c:	8f 89       	ldd	r24, Y+23	; 0x17
    155e:	98 8d       	ldd	r25, Y+24	; 0x18
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	69 8d       	ldd	r22, Y+25	; 0x19
    1572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9c 8b       	std	Y+20, r25	; 0x14
    1596:	8b 8b       	std	Y+19, r24	; 0x13
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <main+0x13e>
    159a:	89 e1       	ldi	r24, 0x19	; 25
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9a 8b       	std	Y+18, r25	; 0x12
    15a0:	89 8b       	std	Y+17, r24	; 0x11
    15a2:	89 89       	ldd	r24, Y+17	; 0x11
    15a4:	9a 89       	ldd	r25, Y+18	; 0x12
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <main+0x12c>
    15aa:	9a 8b       	std	Y+18, r25	; 0x12
    15ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	8b 89       	ldd	r24, Y+19	; 0x13
    15b0:	9c 89       	ldd	r25, Y+20	; 0x14
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9c 8b       	std	Y+20, r25	; 0x14
    15b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ba:	9c 89       	ldd	r25, Y+20	; 0x14
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <main+0x120>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <main+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	6d 89       	ldd	r22, Y+21	; 0x15
    15c4:	7e 89       	ldd	r23, Y+22	; 0x16
    15c6:	8f 89       	ldd	r24, Y+23	; 0x17
    15c8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9c 8b       	std	Y+20, r25	; 0x14
    15d4:	8b 8b       	std	Y+19, r24	; 0x13
    15d6:	8b 89       	ldd	r24, Y+19	; 0x13
    15d8:	9c 89       	ldd	r25, Y+20	; 0x14
    15da:	98 8b       	std	Y+16, r25	; 0x10
    15dc:	8f 87       	std	Y+15, r24	; 0x0f
    15de:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e0:	98 89       	ldd	r25, Y+16	; 0x10
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <main+0x168>
    15e6:	98 8b       	std	Y+16, r25	; 0x10
    15e8:	8f 87       	std	Y+15, r24	; 0x0f
	/*---------------------------------------------------*/

while(1)
{

	displayScreen();
    15ea:	0e 94 42 10 	call	0x2084	; 0x2084 <displayScreen>
	EEPROM_readString(COMM_STR_ADDR,commString,9);
    15ee:	9e 01       	movw	r18, r28
    15f0:	21 5e       	subi	r18, 0xE1	; 225
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	80 e5       	ldi	r24, 0x50	; 80
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	b9 01       	movw	r22, r18
    15fa:	49 e0       	ldi	r20, 0x09	; 9
    15fc:	0e 94 30 06 	call	0xc60	; 0xc60 <EEPROM_readString>
	SPI_sendString(commString);
    1600:	ce 01       	movw	r24, r28
    1602:	4f 96       	adiw	r24, 0x1f	; 31
    1604:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <SPI_sendString>
	navigateScreens[currentScreen]();
    1608:	80 91 84 02 	lds	r24, 0x0284
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	fc 01       	movw	r30, r24
    1616:	ef 58       	subi	r30, 0x8F	; 143
    1618:	fd 4f       	sbci	r31, 0xFD	; 253
    161a:	01 90       	ld	r0, Z+
    161c:	f0 81       	ld	r31, Z
    161e:	e0 2d       	mov	r30, r0
    1620:	09 95       	icall
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	aa e7       	ldi	r26, 0x7A	; 122
    1628:	b3 e4       	ldi	r27, 0x43	; 67
    162a:	8b 87       	std	Y+11, r24	; 0x0b
    162c:	9c 87       	std	Y+12, r25	; 0x0c
    162e:	ad 87       	std	Y+13, r26	; 0x0d
    1630:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1632:	6b 85       	ldd	r22, Y+11	; 0x0b
    1634:	7c 85       	ldd	r23, Y+12	; 0x0c
    1636:	8d 85       	ldd	r24, Y+13	; 0x0d
    1638:	9e 85       	ldd	r25, Y+14	; 0x0e
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	4a e7       	ldi	r20, 0x7A	; 122
    1640:	53 e4       	ldi	r21, 0x43	; 67
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8f 83       	std	Y+7, r24	; 0x07
    164c:	98 87       	std	Y+8, r25	; 0x08
    164e:	a9 87       	std	Y+9, r26	; 0x09
    1650:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	5f e3       	ldi	r21, 0x3F	; 63
    1662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1666:	88 23       	and	r24, r24
    1668:	2c f4       	brge	.+10     	; 0x1674 <main+0x1fa>
		__ticks = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	3f c0       	rjmp	.+126    	; 0x16f2 <main+0x278>
	else if (__tmp > 65535)
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	3f ef       	ldi	r19, 0xFF	; 255
    1680:	4f e7       	ldi	r20, 0x7F	; 127
    1682:	57 e4       	ldi	r21, 0x47	; 71
    1684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1688:	18 16       	cp	r1, r24
    168a:	4c f5       	brge	.+82     	; 0x16de <main+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168c:	6b 85       	ldd	r22, Y+11	; 0x0b
    168e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1690:	8d 85       	ldd	r24, Y+13	; 0x0d
    1692:	9e 85       	ldd	r25, Y+14	; 0x0e
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e2       	ldi	r20, 0x20	; 32
    169a:	51 e4       	ldi	r21, 0x41	; 65
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	9e 83       	std	Y+6, r25	; 0x06
    16b2:	8d 83       	std	Y+5, r24	; 0x05
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <main+0x25a>
    16b6:	89 e1       	ldi	r24, 0x19	; 25
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <main+0x248>
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	69 f7       	brne	.-38     	; 0x16b6 <main+0x23c>
    16dc:	86 cf       	rjmp	.-244    	; 0x15ea <main+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16de:	6f 81       	ldd	r22, Y+7	; 0x07
    16e0:	78 85       	ldd	r23, Y+8	; 0x08
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <main+0x284>
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	71 cf       	rjmp	.-286    	; 0x15ea <main+0x170>

00001708 <mainscreen_f>:
char currentRoom;
char statusFlag=4;
/*-----------------------------------------------*/

void mainscreen_f()
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <mainscreen_f+0x6>
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
char x =keypad_getPressedKey();
    1714:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    1718:	89 83       	std	Y+1, r24	; 0x01
switch(x)
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3b 83       	std	Y+3, r19	; 0x03
    1722:	2a 83       	std	Y+2, r18	; 0x02
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	9b 81       	ldd	r25, Y+3	; 0x03
    1728:	80 33       	cpi	r24, 0x30	; 48
    172a:	91 05       	cpc	r25, r1
    172c:	31 f0       	breq	.+12     	; 0x173a <mainscreen_f+0x32>
    172e:	2a 81       	ldd	r18, Y+2	; 0x02
    1730:	3b 81       	ldd	r19, Y+3	; 0x03
    1732:	21 33       	cpi	r18, 0x31	; 49
    1734:	31 05       	cpc	r19, r1
    1736:	b1 f0       	breq	.+44     	; 0x1764 <mainscreen_f+0x5c>
    1738:	2a c0       	rjmp	.+84     	; 0x178e <mainscreen_f+0x86>
{
case '0':if(checkPass(ADMINADRR,"enter admin pass"))
    173a:	27 e5       	ldi	r18, 0x57	; 87
    173c:	31 e0       	ldi	r19, 0x01	; 1
    173e:	80 e1       	ldi	r24, 0x10	; 16
    1740:	b9 01       	movw	r22, r18
    1742:	0e 94 6f 10 	call	0x20de	; 0x20de <checkPass>
    1746:	88 23       	and	r24, r24
    1748:	31 f0       	breq	.+12     	; 0x1756 <mainscreen_f+0x4e>
		{
		currentScreen=admin1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 84 02 	sts	0x0284, r24
		statusFlag=adminS;
    1750:	10 92 70 02 	sts	0x0270, r1
    1754:	1c c0       	rjmp	.+56     	; 0x178e <mainscreen_f+0x86>
		}
		else
		{
			currentScreen=blockScreen;
    1756:	86 e0       	ldi	r24, 0x06	; 6
    1758:	80 93 84 02 	sts	0x0284, r24
			statusFlag=blockS;
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	80 93 70 02 	sts	0x0270, r24
    1762:	15 c0       	rjmp	.+42     	; 0x178e <mainscreen_f+0x86>
		}

	break;
case '1':if(checkPass(GUESTADRR,"enter guest pass"))
    1764:	28 e6       	ldi	r18, 0x68	; 104
    1766:	31 e0       	ldi	r19, 0x01	; 1
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	b9 01       	movw	r22, r18
    176c:	0e 94 6f 10 	call	0x20de	; 0x20de <checkPass>
    1770:	88 23       	and	r24, r24
    1772:	39 f0       	breq	.+14     	; 0x1782 <mainscreen_f+0x7a>
		{
		currentScreen=guest;
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	80 93 84 02 	sts	0x0284, r24
		statusFlag=guestS;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	80 93 70 02 	sts	0x0270, r24
    1780:	06 c0       	rjmp	.+12     	; 0x178e <mainscreen_f+0x86>
		}
		else
		{
		currentScreen=blockScreen;
    1782:	86 e0       	ldi	r24, 0x06	; 6
    1784:	80 93 84 02 	sts	0x0284, r24
		statusFlag=blockS;
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	80 93 70 02 	sts	0x0270, r24
	break;
case '4':
	break;

}
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <admin1_f>:
void admin1_f()
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <admin1_f+0x6>
    17a0:	0f 92       	push	r0
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	char x =keypad_getPressedKey();
    17a6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    17aa:	89 83       	std	Y+1, r24	; 0x01
	switch(x)
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3b 83       	std	Y+3, r19	; 0x03
    17b4:	2a 83       	std	Y+2, r18	; 0x02
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ba:	82 33       	cpi	r24, 0x32	; 50
    17bc:	91 05       	cpc	r25, r1
    17be:	99 f1       	breq	.+102    	; 0x1826 <admin1_f+0x8c>
    17c0:	2a 81       	ldd	r18, Y+2	; 0x02
    17c2:	3b 81       	ldd	r19, Y+3	; 0x03
    17c4:	23 33       	cpi	r18, 0x33	; 51
    17c6:	31 05       	cpc	r19, r1
    17c8:	5c f4       	brge	.+22     	; 0x17e0 <admin1_f+0x46>
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	9b 81       	ldd	r25, Y+3	; 0x03
    17ce:	80 33       	cpi	r24, 0x30	; 48
    17d0:	91 05       	cpc	r25, r1
    17d2:	91 f0       	breq	.+36     	; 0x17f8 <admin1_f+0x5e>
    17d4:	2a 81       	ldd	r18, Y+2	; 0x02
    17d6:	3b 81       	ldd	r19, Y+3	; 0x03
    17d8:	21 33       	cpi	r18, 0x31	; 49
    17da:	31 05       	cpc	r19, r1
    17dc:	81 f0       	breq	.+32     	; 0x17fe <admin1_f+0x64>
    17de:	50 c0       	rjmp	.+160    	; 0x1880 <admin1_f+0xe6>
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	9b 81       	ldd	r25, Y+3	; 0x03
    17e4:	83 33       	cpi	r24, 0x33	; 51
    17e6:	91 05       	cpc	r25, r1
    17e8:	99 f1       	breq	.+102    	; 0x1850 <admin1_f+0xb6>
    17ea:	2a 81       	ldd	r18, Y+2	; 0x02
    17ec:	3b 81       	ldd	r19, Y+3	; 0x03
    17ee:	24 33       	cpi	r18, 0x34	; 52
    17f0:	31 05       	cpc	r19, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <admin1_f+0x5c>
    17f4:	42 c0       	rjmp	.+132    	; 0x187a <admin1_f+0xe0>
    17f6:	44 c0       	rjmp	.+136    	; 0x1880 <admin1_f+0xe6>
	{
	case '0':currentScreen=mainscreen;
    17f8:	10 92 84 02 	sts	0x0284, r1
    17fc:	41 c0       	rjmp	.+130    	; 0x1880 <admin1_f+0xe6>
		break;
	case '1':currentRoom=0;
    17fe:	10 92 9b 02 	sts	0x029B, r1
	if(roomsStatus[currentRoom])
    1802:	80 91 9b 02 	lds	r24, 0x029B
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	fc 01       	movw	r30, r24
    180c:	ea 57       	subi	r30, 0x7A	; 122
    180e:	fd 4f       	sbci	r31, 0xFD	; 253
    1810:	80 81       	ld	r24, Z
    1812:	88 23       	and	r24, r24
    1814:	21 f0       	breq	.+8      	; 0x181e <admin1_f+0x84>
		currentScreen=roomON;
    1816:	84 e0       	ldi	r24, 0x04	; 4
    1818:	80 93 84 02 	sts	0x0284, r24
    181c:	31 c0       	rjmp	.+98     	; 0x1880 <admin1_f+0xe6>
	else
		currentScreen=roomOFF;
    181e:	85 e0       	ldi	r24, 0x05	; 5
    1820:	80 93 84 02 	sts	0x0284, r24
    1824:	2d c0       	rjmp	.+90     	; 0x1880 <admin1_f+0xe6>
		break;
	case '2':currentRoom=1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	80 93 9b 02 	sts	0x029B, r24
	if(roomsStatus[currentRoom])
    182c:	80 91 9b 02 	lds	r24, 0x029B
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	fc 01       	movw	r30, r24
    1836:	ea 57       	subi	r30, 0x7A	; 122
    1838:	fd 4f       	sbci	r31, 0xFD	; 253
    183a:	80 81       	ld	r24, Z
    183c:	88 23       	and	r24, r24
    183e:	21 f0       	breq	.+8      	; 0x1848 <admin1_f+0xae>
		currentScreen=roomON;
    1840:	84 e0       	ldi	r24, 0x04	; 4
    1842:	80 93 84 02 	sts	0x0284, r24
    1846:	1c c0       	rjmp	.+56     	; 0x1880 <admin1_f+0xe6>
	else
		currentScreen=roomOFF;
    1848:	85 e0       	ldi	r24, 0x05	; 5
    184a:	80 93 84 02 	sts	0x0284, r24
    184e:	18 c0       	rjmp	.+48     	; 0x1880 <admin1_f+0xe6>
		break;
		break;
	case '3':currentRoom=2;
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	80 93 9b 02 	sts	0x029B, r24
	if(roomsStatus[currentRoom])
    1856:	80 91 9b 02 	lds	r24, 0x029B
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	fc 01       	movw	r30, r24
    1860:	ea 57       	subi	r30, 0x7A	; 122
    1862:	fd 4f       	sbci	r31, 0xFD	; 253
    1864:	80 81       	ld	r24, Z
    1866:	88 23       	and	r24, r24
    1868:	21 f0       	breq	.+8      	; 0x1872 <admin1_f+0xd8>
		currentScreen=roomON;
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	80 93 84 02 	sts	0x0284, r24
    1870:	07 c0       	rjmp	.+14     	; 0x1880 <admin1_f+0xe6>
	else
		currentScreen=roomOFF;
    1872:	85 e0       	ldi	r24, 0x05	; 5
    1874:	80 93 84 02 	sts	0x0284, r24
    1878:	03 c0       	rjmp	.+6      	; 0x1880 <admin1_f+0xe6>
		break;
		break;
	case '4':currentScreen=admin2;
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	80 93 84 02 	sts	0x0284, r24
		break;

	}
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <admin2_f>:
void admin2_f()
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <admin2_f+0x6>
    1892:	0f 92       	push	r0
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
	char x =keypad_getPressedKey();
    1898:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    189c:	89 83       	std	Y+1, r24	; 0x01

	switch(x)
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3b 83       	std	Y+3, r19	; 0x03
    18a6:	2a 83       	std	Y+2, r18	; 0x02
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	82 33       	cpi	r24, 0x32	; 50
    18ae:	91 05       	cpc	r25, r1
    18b0:	a9 f1       	breq	.+106    	; 0x191c <admin2_f+0x90>
    18b2:	2a 81       	ldd	r18, Y+2	; 0x02
    18b4:	3b 81       	ldd	r19, Y+3	; 0x03
    18b6:	23 33       	cpi	r18, 0x33	; 51
    18b8:	31 05       	cpc	r19, r1
    18ba:	5c f4       	brge	.+22     	; 0x18d2 <admin2_f+0x46>
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	9b 81       	ldd	r25, Y+3	; 0x03
    18c0:	80 33       	cpi	r24, 0x30	; 48
    18c2:	91 05       	cpc	r25, r1
    18c4:	91 f0       	breq	.+36     	; 0x18ea <admin2_f+0x5e>
    18c6:	2a 81       	ldd	r18, Y+2	; 0x02
    18c8:	3b 81       	ldd	r19, Y+3	; 0x03
    18ca:	21 33       	cpi	r18, 0x31	; 49
    18cc:	31 05       	cpc	r19, r1
    18ce:	89 f0       	breq	.+34     	; 0x18f2 <admin2_f+0x66>
    18d0:	7e c0       	rjmp	.+252    	; 0x19ce <admin2_f+0x142>
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	83 33       	cpi	r24, 0x33	; 51
    18d8:	91 05       	cpc	r25, r1
    18da:	a9 f1       	breq	.+106    	; 0x1946 <admin2_f+0xba>
    18dc:	2a 81       	ldd	r18, Y+2	; 0x02
    18de:	3b 81       	ldd	r19, Y+3	; 0x03
    18e0:	24 33       	cpi	r18, 0x34	; 52
    18e2:	31 05       	cpc	r19, r1
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <admin2_f+0x5c>
    18e6:	60 c0       	rjmp	.+192    	; 0x19a8 <admin2_f+0x11c>
    18e8:	72 c0       	rjmp	.+228    	; 0x19ce <admin2_f+0x142>
	{
	case '0':currentScreen=admin1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 93 84 02 	sts	0x0284, r24
    18f0:	6e c0       	rjmp	.+220    	; 0x19ce <admin2_f+0x142>
		break;
	case '1':currentRoom=3;
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	80 93 9b 02 	sts	0x029B, r24
	if(roomsStatus[currentRoom])
    18f8:	80 91 9b 02 	lds	r24, 0x029B
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	fc 01       	movw	r30, r24
    1902:	ea 57       	subi	r30, 0x7A	; 122
    1904:	fd 4f       	sbci	r31, 0xFD	; 253
    1906:	80 81       	ld	r24, Z
    1908:	88 23       	and	r24, r24
    190a:	21 f0       	breq	.+8      	; 0x1914 <admin2_f+0x88>
		currentScreen=roomON;
    190c:	84 e0       	ldi	r24, 0x04	; 4
    190e:	80 93 84 02 	sts	0x0284, r24
    1912:	5d c0       	rjmp	.+186    	; 0x19ce <admin2_f+0x142>
	else
		currentScreen=roomOFF;
    1914:	85 e0       	ldi	r24, 0x05	; 5
    1916:	80 93 84 02 	sts	0x0284, r24
    191a:	59 c0       	rjmp	.+178    	; 0x19ce <admin2_f+0x142>
		break;
	case '2':currentRoom=4;
    191c:	84 e0       	ldi	r24, 0x04	; 4
    191e:	80 93 9b 02 	sts	0x029B, r24
	if(roomsStatus[currentRoom])
    1922:	80 91 9b 02 	lds	r24, 0x029B
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	fc 01       	movw	r30, r24
    192c:	ea 57       	subi	r30, 0x7A	; 122
    192e:	fd 4f       	sbci	r31, 0xFD	; 253
    1930:	80 81       	ld	r24, Z
    1932:	88 23       	and	r24, r24
    1934:	21 f0       	breq	.+8      	; 0x193e <admin2_f+0xb2>
		currentScreen=roomON;
    1936:	84 e0       	ldi	r24, 0x04	; 4
    1938:	80 93 84 02 	sts	0x0284, r24
    193c:	48 c0       	rjmp	.+144    	; 0x19ce <admin2_f+0x142>
	else
		currentScreen=roomOFF;
    193e:	85 e0       	ldi	r24, 0x05	; 5
    1940:	80 93 84 02 	sts	0x0284, r24
    1944:	44 c0       	rjmp	.+136    	; 0x19ce <admin2_f+0x142>
		break;
	case '3':
		airCondStringValue[0]='0'+airCondSetValue/10;
    1946:	80 91 6f 02 	lds	r24, 0x026F
    194a:	9a e0       	ldi	r25, 0x0A	; 10
    194c:	69 2f       	mov	r22, r25
    194e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__udivmodqi4>
    1952:	80 5d       	subi	r24, 0xD0	; 208
    1954:	80 93 9c 02 	sts	0x029C, r24
		airCondStringValue[1]='0'+airCondSetValue%10;
    1958:	80 91 6f 02 	lds	r24, 0x026F
    195c:	9a e0       	ldi	r25, 0x0A	; 10
    195e:	69 2f       	mov	r22, r25
    1960:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__udivmodqi4>
    1964:	89 2f       	mov	r24, r25
    1966:	80 5d       	subi	r24, 0xD0	; 208
    1968:	80 93 9d 02 	sts	0x029D, r24
		airCondStringValue[2]='\0';
    196c:	10 92 9e 02 	sts	0x029E, r1
		strcpy(airCondOnDialogue,AIR_COND_ON_SCREEN_1ST_ROW);
    1970:	8b e8       	ldi	r24, 0x8B	; 139
    1972:	92 e0       	ldi	r25, 0x02	; 2
    1974:	29 e7       	ldi	r18, 0x79	; 121
    1976:	31 e0       	ldi	r19, 0x01	; 1
    1978:	b9 01       	movw	r22, r18
    197a:	4f e0       	ldi	r20, 0x0F	; 15
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <memcpy>
		strcat(airCondOnDialogue,airCondStringValue);
    1982:	8b e8       	ldi	r24, 0x8B	; 139
    1984:	92 e0       	ldi	r25, 0x02	; 2
    1986:	2c e9       	ldi	r18, 0x9C	; 156
    1988:	32 e0       	ldi	r19, 0x02	; 2
    198a:	b9 01       	movw	r22, r18
    198c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <strcat>
		if(airCond)
    1990:	80 91 85 02 	lds	r24, 0x0285
    1994:	88 23       	and	r24, r24
    1996:	21 f0       	breq	.+8      	; 0x19a0 <admin2_f+0x114>
		currentScreen=airON;
    1998:	88 e0       	ldi	r24, 0x08	; 8
    199a:	80 93 84 02 	sts	0x0284, r24
    199e:	17 c0       	rjmp	.+46     	; 0x19ce <admin2_f+0x142>
	else
		currentScreen=airOFF;
    19a0:	87 e0       	ldi	r24, 0x07	; 7
    19a2:	80 93 84 02 	sts	0x0284, r24
    19a6:	13 c0       	rjmp	.+38     	; 0x19ce <admin2_f+0x142>
		break;
	case '4':if(checkPass(ADMINADRR,"enter admin pass"))
    19a8:	27 e5       	ldi	r18, 0x57	; 87
    19aa:	31 e0       	ldi	r19, 0x01	; 1
    19ac:	80 e1       	ldi	r24, 0x10	; 16
    19ae:	b9 01       	movw	r22, r18
    19b0:	0e 94 6f 10 	call	0x20de	; 0x20de <checkPass>
    19b4:	88 23       	and	r24, r24
    19b6:	29 f0       	breq	.+10     	; 0x19c2 <admin2_f+0x136>
			{
			firstStart_func();
    19b8:	0e 94 b2 13 	call	0x2764	; 0x2764 <firstStart_func>
			currentScreen=mainscreen;
    19bc:	10 92 84 02 	sts	0x0284, r1
    19c0:	06 c0       	rjmp	.+12     	; 0x19ce <admin2_f+0x142>
			}
			else
			{
				currentScreen=blockScreen;
    19c2:	86 e0       	ldi	r24, 0x06	; 6
    19c4:	80 93 84 02 	sts	0x0284, r24
				statusFlag=blockS;
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	80 93 70 02 	sts	0x0270, r24
			}

		break;

	}
}
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <guest_f>:
void guest_f(){
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <guest_f+0x6>
    19e0:	0f 92       	push	r0
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
	char x =keypad_getPressedKey();
    19e6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    19ea:	89 83       	std	Y+1, r24	; 0x01
	switch(x)
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	3b 83       	std	Y+3, r19	; 0x03
    19f4:	2a 83       	std	Y+2, r18	; 0x02
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	82 33       	cpi	r24, 0x32	; 50
    19fc:	91 05       	cpc	r25, r1
    19fe:	99 f1       	breq	.+102    	; 0x1a66 <guest_f+0x8c>
    1a00:	2a 81       	ldd	r18, Y+2	; 0x02
    1a02:	3b 81       	ldd	r19, Y+3	; 0x03
    1a04:	23 33       	cpi	r18, 0x33	; 51
    1a06:	31 05       	cpc	r19, r1
    1a08:	5c f4       	brge	.+22     	; 0x1a20 <guest_f+0x46>
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0e:	80 33       	cpi	r24, 0x30	; 48
    1a10:	91 05       	cpc	r25, r1
    1a12:	91 f0       	breq	.+36     	; 0x1a38 <guest_f+0x5e>
    1a14:	2a 81       	ldd	r18, Y+2	; 0x02
    1a16:	3b 81       	ldd	r19, Y+3	; 0x03
    1a18:	21 33       	cpi	r18, 0x31	; 49
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	81 f0       	breq	.+32     	; 0x1a3e <guest_f+0x64>
    1a1e:	61 c0       	rjmp	.+194    	; 0x1ae2 <guest_f+0x108>
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	9b 81       	ldd	r25, Y+3	; 0x03
    1a24:	83 33       	cpi	r24, 0x33	; 51
    1a26:	91 05       	cpc	r25, r1
    1a28:	99 f1       	breq	.+102    	; 0x1a90 <guest_f+0xb6>
    1a2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a2c:	3b 81       	ldd	r19, Y+3	; 0x03
    1a2e:	24 33       	cpi	r18, 0x34	; 52
    1a30:	31 05       	cpc	r19, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <guest_f+0x5c>
    1a34:	42 c0       	rjmp	.+132    	; 0x1aba <guest_f+0xe0>
    1a36:	55 c0       	rjmp	.+170    	; 0x1ae2 <guest_f+0x108>
	{
	case '0':currentScreen=mainscreen;
    1a38:	10 92 84 02 	sts	0x0284, r1
    1a3c:	52 c0       	rjmp	.+164    	; 0x1ae2 <guest_f+0x108>
		break;
	case '1':currentRoom=0;
    1a3e:	10 92 9b 02 	sts	0x029B, r1
	if(roomsStatus[currentRoom])
    1a42:	80 91 9b 02 	lds	r24, 0x029B
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	ea 57       	subi	r30, 0x7A	; 122
    1a4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a50:	80 81       	ld	r24, Z
    1a52:	88 23       	and	r24, r24
    1a54:	21 f0       	breq	.+8      	; 0x1a5e <guest_f+0x84>
		currentScreen=roomON;
    1a56:	84 e0       	ldi	r24, 0x04	; 4
    1a58:	80 93 84 02 	sts	0x0284, r24
    1a5c:	42 c0       	rjmp	.+132    	; 0x1ae2 <guest_f+0x108>
	else
		currentScreen=roomOFF;
    1a5e:	85 e0       	ldi	r24, 0x05	; 5
    1a60:	80 93 84 02 	sts	0x0284, r24
    1a64:	3e c0       	rjmp	.+124    	; 0x1ae2 <guest_f+0x108>
		break;
	case '2':currentRoom=1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	80 93 9b 02 	sts	0x029B, r24
	if(roomsStatus[currentRoom])
    1a6c:	80 91 9b 02 	lds	r24, 0x029B
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	fc 01       	movw	r30, r24
    1a76:	ea 57       	subi	r30, 0x7A	; 122
    1a78:	fd 4f       	sbci	r31, 0xFD	; 253
    1a7a:	80 81       	ld	r24, Z
    1a7c:	88 23       	and	r24, r24
    1a7e:	21 f0       	breq	.+8      	; 0x1a88 <guest_f+0xae>
		currentScreen=roomON;
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	80 93 84 02 	sts	0x0284, r24
    1a86:	2d c0       	rjmp	.+90     	; 0x1ae2 <guest_f+0x108>
	else
		currentScreen=roomOFF;
    1a88:	85 e0       	ldi	r24, 0x05	; 5
    1a8a:	80 93 84 02 	sts	0x0284, r24
    1a8e:	29 c0       	rjmp	.+82     	; 0x1ae2 <guest_f+0x108>
		break;
	case '3':currentRoom=2;
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	80 93 9b 02 	sts	0x029B, r24
	if(roomsStatus[currentRoom])
    1a96:	80 91 9b 02 	lds	r24, 0x029B
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	ea 57       	subi	r30, 0x7A	; 122
    1aa2:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa4:	80 81       	ld	r24, Z
    1aa6:	88 23       	and	r24, r24
    1aa8:	21 f0       	breq	.+8      	; 0x1ab2 <guest_f+0xd8>
		currentScreen=roomON;
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	80 93 84 02 	sts	0x0284, r24
    1ab0:	18 c0       	rjmp	.+48     	; 0x1ae2 <guest_f+0x108>
	else
		currentScreen=roomOFF;
    1ab2:	85 e0       	ldi	r24, 0x05	; 5
    1ab4:	80 93 84 02 	sts	0x0284, r24
    1ab8:	14 c0       	rjmp	.+40     	; 0x1ae2 <guest_f+0x108>
		break;
	case '4':currentRoom=3;
    1aba:	83 e0       	ldi	r24, 0x03	; 3
    1abc:	80 93 9b 02 	sts	0x029B, r24
	if(roomsStatus[currentRoom])
    1ac0:	80 91 9b 02 	lds	r24, 0x029B
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	fc 01       	movw	r30, r24
    1aca:	ea 57       	subi	r30, 0x7A	; 122
    1acc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 23       	and	r24, r24
    1ad2:	21 f0       	breq	.+8      	; 0x1adc <guest_f+0x102>
		currentScreen=roomON;
    1ad4:	84 e0       	ldi	r24, 0x04	; 4
    1ad6:	80 93 84 02 	sts	0x0284, r24
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <guest_f+0x108>
	else
		currentScreen=roomOFF;
    1adc:	85 e0       	ldi	r24, 0x05	; 5
    1ade:	80 93 84 02 	sts	0x0284, r24
		break;

	}
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <roomON_f>:
void roomON_f(){
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <roomON_f+0x6>
    1af4:	0f 92       	push	r0
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
	char x =keypad_getPressedKey();
    1afa:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    1afe:	89 83       	std	Y+1, r24	; 0x01
	switch(x)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	3b 83       	std	Y+3, r19	; 0x03
    1b08:	2a 83       	std	Y+2, r18	; 0x02
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	80 33       	cpi	r24, 0x30	; 48
    1b10:	91 05       	cpc	r25, r1
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <roomON_f+0x32>
    1b14:	2a 81       	ldd	r18, Y+2	; 0x02
    1b16:	3b 81       	ldd	r19, Y+3	; 0x03
    1b18:	21 33       	cpi	r18, 0x31	; 49
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	69 f0       	breq	.+26     	; 0x1b38 <roomON_f+0x4a>
    1b1e:	37 c0       	rjmp	.+110    	; 0x1b8e <roomON_f+0xa0>
	{
	case '0':if(statusFlag==adminS)
    1b20:	80 91 70 02 	lds	r24, 0x0270
    1b24:	88 23       	and	r24, r24
    1b26:	21 f4       	brne	.+8      	; 0x1b30 <roomON_f+0x42>
		currentScreen=admin1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	80 93 84 02 	sts	0x0284, r24
    1b2e:	2f c0       	rjmp	.+94     	; 0x1b8e <roomON_f+0xa0>
	else
		currentScreen=guest;
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	80 93 84 02 	sts	0x0284, r24
    1b36:	2b c0       	rjmp	.+86     	; 0x1b8e <roomON_f+0xa0>
		break;
	case '1':roomsStatus[currentRoom]=0;
    1b38:	80 91 9b 02 	lds	r24, 0x029B
    1b3c:	88 2f       	mov	r24, r24
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	fc 01       	movw	r30, r24
    1b42:	ea 57       	subi	r30, 0x7A	; 122
    1b44:	fd 4f       	sbci	r31, 0xFD	; 253
    1b46:	10 82       	st	Z, r1
	EEPROM_writeByte(COMM_STR_ADDR+currentRoom,roomsStatus[currentRoom]+'0');
    1b48:	80 91 9b 02 	lds	r24, 0x029B
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	ac 01       	movw	r20, r24
    1b52:	40 5b       	subi	r20, 0xB0	; 176
    1b54:	5f 4f       	sbci	r21, 0xFF	; 255
    1b56:	80 91 9b 02 	lds	r24, 0x029B
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	fc 01       	movw	r30, r24
    1b60:	ea 57       	subi	r30, 0x7A	; 122
    1b62:	fd 4f       	sbci	r31, 0xFD	; 253
    1b64:	80 81       	ld	r24, Z
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9c 01       	movw	r18, r24
    1b6c:	20 5d       	subi	r18, 0xD0	; 208
    1b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b70:	ca 01       	movw	r24, r20
    1b72:	b9 01       	movw	r22, r18
    1b74:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
	if(statusFlag==adminS)
    1b78:	80 91 70 02 	lds	r24, 0x0270
    1b7c:	88 23       	and	r24, r24
    1b7e:	21 f4       	brne	.+8      	; 0x1b88 <roomON_f+0x9a>
		currentScreen=admin1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	80 93 84 02 	sts	0x0284, r24
    1b86:	03 c0       	rjmp	.+6      	; 0x1b8e <roomON_f+0xa0>
	else
		currentScreen=guest;
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	80 93 84 02 	sts	0x0284, r24
		break;
	case '4':
		break;

	}
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <roomOFF_f>:
void roomOFF_f(){
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <roomOFF_f+0x6>
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	char x =keypad_getPressedKey();
    1ba6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    1baa:	89 83       	std	Y+1, r24	; 0x01
	switch(x)
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	3b 83       	std	Y+3, r19	; 0x03
    1bb4:	2a 83       	std	Y+2, r18	; 0x02
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bba:	80 33       	cpi	r24, 0x30	; 48
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	31 f0       	breq	.+12     	; 0x1bcc <roomOFF_f+0x32>
    1bc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc2:	3b 81       	ldd	r19, Y+3	; 0x03
    1bc4:	21 33       	cpi	r18, 0x31	; 49
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	69 f0       	breq	.+26     	; 0x1be4 <roomOFF_f+0x4a>
    1bca:	38 c0       	rjmp	.+112    	; 0x1c3c <roomOFF_f+0xa2>
	{
	case '0':if(statusFlag==adminS)
    1bcc:	80 91 70 02 	lds	r24, 0x0270
    1bd0:	88 23       	and	r24, r24
    1bd2:	21 f4       	brne	.+8      	; 0x1bdc <roomOFF_f+0x42>
		currentScreen=admin1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 84 02 	sts	0x0284, r24
    1bda:	30 c0       	rjmp	.+96     	; 0x1c3c <roomOFF_f+0xa2>
	else
		currentScreen=guest;
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	80 93 84 02 	sts	0x0284, r24
    1be2:	2c c0       	rjmp	.+88     	; 0x1c3c <roomOFF_f+0xa2>
		break;
	case '1':roomsStatus[currentRoom]=1;
    1be4:	80 91 9b 02 	lds	r24, 0x029B
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	fc 01       	movw	r30, r24
    1bee:	ea 57       	subi	r30, 0x7A	; 122
    1bf0:	fd 4f       	sbci	r31, 0xFD	; 253
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 83       	st	Z, r24
	EEPROM_writeByte(COMM_STR_ADDR+currentRoom,roomsStatus[currentRoom]+'0');
    1bf6:	80 91 9b 02 	lds	r24, 0x029B
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	ac 01       	movw	r20, r24
    1c00:	40 5b       	subi	r20, 0xB0	; 176
    1c02:	5f 4f       	sbci	r21, 0xFF	; 255
    1c04:	80 91 9b 02 	lds	r24, 0x029B
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	ea 57       	subi	r30, 0x7A	; 122
    1c10:	fd 4f       	sbci	r31, 0xFD	; 253
    1c12:	80 81       	ld	r24, Z
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9c 01       	movw	r18, r24
    1c1a:	20 5d       	subi	r18, 0xD0	; 208
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	ca 01       	movw	r24, r20
    1c20:	b9 01       	movw	r22, r18
    1c22:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
	if(statusFlag==adminS)
    1c26:	80 91 70 02 	lds	r24, 0x0270
    1c2a:	88 23       	and	r24, r24
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <roomOFF_f+0x9c>
		currentScreen=admin1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	80 93 84 02 	sts	0x0284, r24
    1c34:	03 c0       	rjmp	.+6      	; 0x1c3c <roomOFF_f+0xa2>
	else
		currentScreen=guest;
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	80 93 84 02 	sts	0x0284, r24
		break;
	case '4':
		break;

	}
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <blockMode>:
void blockMode()
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	60 97       	sbiw	r28, 0x10	; 16
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
	EEPROM_writeByte(BLOCK_FLAG_ADRR,0);
    1c5c:	80 e3       	ldi	r24, 0x30	; 48
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
	for(int i=BLOCK_MODE_WAIT;i>0;i--)
    1c68:	8e e1       	ldi	r24, 0x1E	; 30
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	98 8b       	std	Y+16, r25	; 0x10
    1c6e:	8f 87       	std	Y+15, r24	; 0x0f
    1c70:	8d c0       	rjmp	.+282    	; 0x1d8c <blockMode+0x144>
	{
		LCD_goToRowColumn(1,0);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
		LCD_displayString("   ");
    1c7a:	88 e8       	ldi	r24, 0x88	; 136
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
		LCD_intgerToString(i);
    1c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8c:	98 89       	ldd	r25, Y+16	; 0x10
    1c8e:	aa 27       	eor	r26, r26
    1c90:	97 fd       	sbrc	r25, 7
    1c92:	a0 95       	com	r26
    1c94:	ba 2f       	mov	r27, r26
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCD_intgerToString>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	aa e7       	ldi	r26, 0x7A	; 122
    1ca4:	b4 e4       	ldi	r27, 0x44	; 68
    1ca6:	8b 87       	std	Y+11, r24	; 0x0b
    1ca8:	9c 87       	std	Y+12, r25	; 0x0c
    1caa:	ad 87       	std	Y+13, r26	; 0x0d
    1cac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a e7       	ldi	r20, 0x7A	; 122
    1cbc:	53 e4       	ldi	r21, 0x43	; 67
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8f 83       	std	Y+7, r24	; 0x07
    1cc8:	98 87       	std	Y+8, r25	; 0x08
    1cca:	a9 87       	std	Y+9, r26	; 0x09
    1ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <blockMode+0xa8>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <blockMode+0x126>
	else if (__tmp > 65535)
    1cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf2:	78 85       	ldd	r23, Y+8	; 0x08
    1cf4:	89 85       	ldd	r24, Y+9	; 0x09
    1cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <blockMode+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <blockMode+0x108>
    1d32:	89 e1       	ldi	r24, 0x19	; 25
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <blockMode+0xf6>
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <blockMode+0xea>
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <blockMode+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5c:	78 85       	ldd	r23, Y+8	; 0x08
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	9e 83       	std	Y+6, r25	; 0x06
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <blockMode+0x132>
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
	}
}
void blockMode()
{
	EEPROM_writeByte(BLOCK_FLAG_ADRR,0);
	for(int i=BLOCK_MODE_WAIT;i>0;i--)
    1d82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d84:	98 89       	ldd	r25, Y+16	; 0x10
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	98 8b       	std	Y+16, r25	; 0x10
    1d8a:	8f 87       	std	Y+15, r24	; 0x0f
    1d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8e:	98 89       	ldd	r25, Y+16	; 0x10
    1d90:	18 16       	cp	r1, r24
    1d92:	19 06       	cpc	r1, r25
    1d94:	0c f4       	brge	.+2      	; 0x1d98 <blockMode+0x150>
    1d96:	6d cf       	rjmp	.-294    	; 0x1c72 <blockMode+0x2a>
		LCD_displayString("   ");
		LCD_goToRowColumn(1,0);
		LCD_intgerToString(i);
		_delay_ms(1000);
	}
	currentScreen=mainscreen;
    1d98:	10 92 84 02 	sts	0x0284, r1
	statusFlag=4;
    1d9c:	84 e0       	ldi	r24, 0x04	; 4
    1d9e:	80 93 70 02 	sts	0x0270, r24
	EEPROM_writeByte(BLOCK_FLAG_ADRR,1);
    1da2:	80 e3       	ldi	r24, 0x30	; 48
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	61 e0       	ldi	r22, 0x01	; 1
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
	EEPROM_writeByte(TRIES_FLAG_ADRR,0);
    1dae:	80 e4       	ldi	r24, 0x40	; 64
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>


}
    1dba:	60 96       	adiw	r28, 0x10	; 16
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <airCondChangeValue>:
void airCondChangeValue()
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	61 97       	sbiw	r28, 0x11	; 17
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
	char value=0,x=0;
    1de0:	19 8a       	std	Y+17, r1	; 0x11
    1de2:	18 8a       	std	Y+16, r1	; 0x10
	LCD_sendCommand(CLR_SCREEN);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
	LCD_displayString("set value 2digit");
    1dea:	8c e8       	ldi	r24, 0x8C	; 140
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
	LCD_displayString("   C");
    1dfa:	8d e9       	ldi	r24, 0x9D	; 157
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
	for(char i=10;i>=1;i=i/10)
    1e0a:	8a e0       	ldi	r24, 0x0A	; 10
    1e0c:	8f 87       	std	Y+15, r24	; 0x0f
    1e0e:	91 c0       	rjmp	.+290    	; 0x1f32 <airCondChangeValue+0x166>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	aa e7       	ldi	r26, 0x7A	; 122
    1e16:	b3 e4       	ldi	r27, 0x43	; 67
    1e18:	8b 87       	std	Y+11, r24	; 0x0b
    1e1a:	9c 87       	std	Y+12, r25	; 0x0c
    1e1c:	ad 87       	std	Y+13, r26	; 0x0d
    1e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a e7       	ldi	r20, 0x7A	; 122
    1e2e:	53 e4       	ldi	r21, 0x43	; 67
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	8f 83       	std	Y+7, r24	; 0x07
    1e3a:	98 87       	std	Y+8, r25	; 0x08
    1e3c:	a9 87       	std	Y+9, r26	; 0x09
    1e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e40:	6f 81       	ldd	r22, Y+7	; 0x07
    1e42:	78 85       	ldd	r23, Y+8	; 0x08
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <airCondChangeValue+0x96>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <airCondChangeValue+0x114>
	else if (__tmp > 65535)
    1e62:	6f 81       	ldd	r22, Y+7	; 0x07
    1e64:	78 85       	ldd	r23, Y+8	; 0x08
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	4c f5       	brge	.+82     	; 0x1ecc <airCondChangeValue+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <airCondChangeValue+0xf6>
    1ea4:	89 e1       	ldi	r24, 0x19	; 25
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <airCondChangeValue+0xe4>
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <airCondChangeValue+0xd8>
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <airCondChangeValue+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <airCondChangeValue+0x120>
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(250);
		x=keypad_getPressedKey();
    1ef4:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    1ef8:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter(x);
    1efa:	88 89       	ldd	r24, Y+16	; 0x10
    1efc:	0e 94 43 07 	call	0xe86	; 0xe86 <LCD_displayCharacter>
		value=value+(i*(x-'0'));
    1f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	88 89       	ldd	r24, Y+16	; 0x10
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	c0 97       	sbiw	r24, 0x30	; 48
    1f0e:	ac 01       	movw	r20, r24
    1f10:	24 9f       	mul	r18, r20
    1f12:	c0 01       	movw	r24, r0
    1f14:	25 9f       	mul	r18, r21
    1f16:	90 0d       	add	r25, r0
    1f18:	34 9f       	mul	r19, r20
    1f1a:	90 0d       	add	r25, r0
    1f1c:	11 24       	eor	r1, r1
    1f1e:	98 2f       	mov	r25, r24
    1f20:	89 89       	ldd	r24, Y+17	; 0x11
    1f22:	89 0f       	add	r24, r25
    1f24:	89 8b       	std	Y+17, r24	; 0x11
	LCD_sendCommand(CLR_SCREEN);
	LCD_displayString("set value 2digit");
	LCD_goToRowColumn(1,0);
	LCD_displayString("   C");
	LCD_goToRowColumn(1,0);
	for(char i=10;i>=1;i=i/10)
    1f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f28:	9a e0       	ldi	r25, 0x0A	; 10
    1f2a:	69 2f       	mov	r22, r25
    1f2c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__udivmodqi4>
    1f30:	8f 87       	std	Y+15, r24	; 0x0f
    1f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f34:	88 23       	and	r24, r24
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <airCondChangeValue+0x16e>
    1f38:	6b cf       	rjmp	.-298    	; 0x1e10 <airCondChangeValue+0x44>
		_delay_ms(250);
		x=keypad_getPressedKey();
		LCD_displayCharacter(x);
		value=value+(i*(x-'0'));
	}
	airCondSetValue=value;
    1f3a:	89 89       	ldd	r24, Y+17	; 0x11
    1f3c:	80 93 6f 02 	sts	0x026F, r24
	EEPROM_writeByte(COMM_STR_ADDR+COMM_STR_AIRCOND_VALUE_POS,airCondSetValue+'0');
    1f40:	80 91 6f 02 	lds	r24, 0x026F
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9c 01       	movw	r18, r24
    1f4a:	20 5d       	subi	r18, 0xD0	; 208
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4e:	86 e5       	ldi	r24, 0x56	; 86
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	b9 01       	movw	r22, r18
    1f54:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>




}
    1f58:	61 96       	adiw	r28, 0x11	; 17
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <airOFF_f>:
void airOFF_f(){
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <airOFF_f+0x6>
    1f70:	0f 92       	push	r0
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	char x =keypad_getPressedKey();
    1f76:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    1f7a:	89 83       	std	Y+1, r24	; 0x01
	switch(x)
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	3b 83       	std	Y+3, r19	; 0x03
    1f84:	2a 83       	std	Y+2, r18	; 0x02
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8a:	81 33       	cpi	r24, 0x31	; 49
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	49 f1       	breq	.+82     	; 0x1fe2 <airOFF_f+0x78>
    1f90:	2a 81       	ldd	r18, Y+2	; 0x02
    1f92:	3b 81       	ldd	r19, Y+3	; 0x03
    1f94:	22 33       	cpi	r18, 0x32	; 50
    1f96:	31 05       	cpc	r19, r1
    1f98:	69 f0       	breq	.+26     	; 0x1fb4 <airOFF_f+0x4a>
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9e:	80 33       	cpi	r24, 0x30	; 48
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	21 f5       	brne	.+72     	; 0x1fec <airOFF_f+0x82>
	{
	case '0':if(statusFlag==adminS)
    1fa4:	80 91 70 02 	lds	r24, 0x0270
    1fa8:	88 23       	and	r24, r24
    1faa:	01 f5       	brne	.+64     	; 0x1fec <airOFF_f+0x82>
		currentScreen=admin2;
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	80 93 84 02 	sts	0x0284, r24
    1fb2:	1c c0       	rjmp	.+56     	; 0x1fec <airOFF_f+0x82>
		break;
	case '2':airCond=1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	80 93 85 02 	sts	0x0285, r24
	EEPROM_writeByte(COMM_STR_ADDR+COMM_STR_AIRCOND_POS,airCond+'0');
    1fba:	80 91 85 02 	lds	r24, 0x0285
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	9c 01       	movw	r18, r24
    1fc4:	20 5d       	subi	r18, 0xD0	; 208
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	85 e5       	ldi	r24, 0x55	; 85
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	b9 01       	movw	r22, r18
    1fce:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>

	if(statusFlag==adminS)
    1fd2:	80 91 70 02 	lds	r24, 0x0270
    1fd6:	88 23       	and	r24, r24
    1fd8:	49 f4       	brne	.+18     	; 0x1fec <airOFF_f+0x82>
		currentScreen=admin2;
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	80 93 84 02 	sts	0x0284, r24
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <airOFF_f+0x82>
		break;
	case '1':
		airCondChangeValue();
    1fe2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <airCondChangeValue>
		currentScreen=admin2;
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	80 93 84 02 	sts	0x0284, r24
		break;

	}
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <airON_f>:
void airON_f(){
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <airON_f+0x6>
    1ffe:	0f 92       	push	r0
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	char x =keypad_getPressedKey();
    2004:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    2008:	89 83       	std	Y+1, r24	; 0x01
	switch(x)
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	3b 83       	std	Y+3, r19	; 0x03
    2012:	2a 83       	std	Y+2, r18	; 0x02
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	9b 81       	ldd	r25, Y+3	; 0x03
    2018:	81 33       	cpi	r24, 0x31	; 49
    201a:	91 05       	cpc	r25, r1
    201c:	41 f1       	breq	.+80     	; 0x206e <airON_f+0x76>
    201e:	2a 81       	ldd	r18, Y+2	; 0x02
    2020:	3b 81       	ldd	r19, Y+3	; 0x03
    2022:	22 33       	cpi	r18, 0x32	; 50
    2024:	31 05       	cpc	r19, r1
    2026:	69 f0       	breq	.+26     	; 0x2042 <airON_f+0x4a>
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	80 33       	cpi	r24, 0x30	; 48
    202e:	91 05       	cpc	r25, r1
    2030:	19 f5       	brne	.+70     	; 0x2078 <airON_f+0x80>
	{
	case '0':if(statusFlag==adminS)
    2032:	80 91 70 02 	lds	r24, 0x0270
    2036:	88 23       	and	r24, r24
    2038:	f9 f4       	brne	.+62     	; 0x2078 <airON_f+0x80>
		currentScreen=admin2;
    203a:	82 e0       	ldi	r24, 0x02	; 2
    203c:	80 93 84 02 	sts	0x0284, r24
    2040:	1b c0       	rjmp	.+54     	; 0x2078 <airON_f+0x80>
		break;
	case '2':airCond=0;
    2042:	10 92 85 02 	sts	0x0285, r1
	EEPROM_writeByte(COMM_STR_ADDR+COMM_STR_AIRCOND_POS,airCond+'0');
    2046:	80 91 85 02 	lds	r24, 0x0285
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9c 01       	movw	r18, r24
    2050:	20 5d       	subi	r18, 0xD0	; 208
    2052:	3f 4f       	sbci	r19, 0xFF	; 255
    2054:	85 e5       	ldi	r24, 0x55	; 85
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	b9 01       	movw	r22, r18
    205a:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
	if(statusFlag==adminS)
    205e:	80 91 70 02 	lds	r24, 0x0270
    2062:	88 23       	and	r24, r24
    2064:	49 f4       	brne	.+18     	; 0x2078 <airON_f+0x80>
		currentScreen=admin2;
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	80 93 84 02 	sts	0x0284, r24
    206c:	05 c0       	rjmp	.+10     	; 0x2078 <airON_f+0x80>
		break;
	case '1':
		airCondChangeValue();
    206e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <airCondChangeValue>
		currentScreen=admin2;
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	80 93 84 02 	sts	0x0284, r24
		break;

	}
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <displayScreen>:
		roomOFF_f,
		blockMode,
		airOFF_f,
		airON_f};
void displayScreen()
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLR_SCREEN);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
	LCD_displayString(Screens[currentScreen][0]);
    2092:	80 91 84 02 	lds	r24, 0x0284
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	fc 01       	movw	r30, r24
    20a4:	e5 5b       	subi	r30, 0xB5	; 181
    20a6:	fd 4f       	sbci	r31, 0xFD	; 253
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
	LCD_displayString(Screens[currentScreen][1]);
    20b8:	80 91 84 02 	lds	r24, 0x0284
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	fc 01       	movw	r30, r24
    20cc:	e5 5b       	subi	r30, 0xB5	; 181
    20ce:	fd 4f       	sbci	r31, 0xFD	; 253
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>


}
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <checkPass>:
#include "lcd.h"
#include "config.h"


char checkPass(uint8 eepromadrr,char* dialogue)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	ad 97       	sbiw	r28, 0x2d	; 45
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	8a a7       	std	Y+42, r24	; 0x2a
    20f4:	7c a7       	std	Y+44, r23	; 0x2c
    20f6:	6b a7       	std	Y+43, r22	; 0x2b
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	aa e7       	ldi	r26, 0x7A	; 122
    20fe:	b3 e4       	ldi	r27, 0x43	; 67
    2100:	89 8f       	std	Y+25, r24	; 0x19
    2102:	9a 8f       	std	Y+26, r25	; 0x1a
    2104:	ab 8f       	std	Y+27, r26	; 0x1b
    2106:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	69 8d       	ldd	r22, Y+25	; 0x19
    210a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a e7       	ldi	r20, 0x7A	; 122
    2116:	53 e4       	ldi	r21, 0x43	; 67
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8d 8b       	std	Y+21, r24	; 0x15
    2122:	9e 8b       	std	Y+22, r25	; 0x16
    2124:	af 8b       	std	Y+23, r26	; 0x17
    2126:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <checkPass+0x6c>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 8b       	std	Y+20, r25	; 0x14
    2146:	8b 8b       	std	Y+19, r24	; 0x13
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <checkPass+0xea>
	else if (__tmp > 65535)
    214a:	6d 89       	ldd	r22, Y+21	; 0x15
    214c:	7e 89       	ldd	r23, Y+22	; 0x16
    214e:	8f 89       	ldd	r24, Y+23	; 0x17
    2150:	98 8d       	ldd	r25, Y+24	; 0x18
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <checkPass+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	69 8d       	ldd	r22, Y+25	; 0x19
    2164:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2168:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <checkPass+0xcc>
    218c:	89 e1       	ldi	r24, 0x19	; 25
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9a 8b       	std	Y+18, r25	; 0x12
    2192:	89 8b       	std	Y+17, r24	; 0x11
    2194:	89 89       	ldd	r24, Y+17	; 0x11
    2196:	9a 89       	ldd	r25, Y+18	; 0x12
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <checkPass+0xba>
    219c:	9a 8b       	std	Y+18, r25	; 0x12
    219e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <checkPass+0xae>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <checkPass+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6d 89       	ldd	r22, Y+21	; 0x15
    21b6:	7e 89       	ldd	r23, Y+22	; 0x16
    21b8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ba:	98 8d       	ldd	r25, Y+24	; 0x18
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9c 8b       	std	Y+20, r25	; 0x14
    21c6:	8b 8b       	std	Y+19, r24	; 0x13
    21c8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ca:	9c 89       	ldd	r25, Y+20	; 0x14
    21cc:	98 8b       	std	Y+16, r25	; 0x10
    21ce:	8f 87       	std	Y+15, r24	; 0x0f
    21d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d2:	98 89       	ldd	r25, Y+16	; 0x10
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <checkPass+0xf6>
    21d8:	98 8b       	std	Y+16, r25	; 0x10
    21da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	uint8 i;
	for(i=EEPROM_readByte(TRIES_FLAG_ADRR);i<NUM_OF_TRIES;i++)
    21dc:	80 e4       	ldi	r24, 0x40	; 64
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 d6 05 	call	0xbac	; 0xbac <EEPROM_readByte>
    21e4:	8d 8f       	std	Y+29, r24	; 0x1d
    21e6:	bb c0       	rjmp	.+374    	; 0x235e <checkPass+0x280>
	{
		EEPROM_writeByte(TRIES_FLAG_ADRR,i);
    21e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	80 e4       	ldi	r24, 0x40	; 64
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	b9 01       	movw	r22, r18
    21f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
		uint8 pass1[PASSWORD_SIZE+1],pass2[PASSWORD_SIZE+1];
		pass1[PASSWORD_SIZE]='\0';
    21f8:	1b a2       	std	Y+35, r1	; 0x23
		EEPROM_readString(eepromadrr,pass2,PASSWORD_SIZE+1);
    21fa:	8a a5       	ldd	r24, Y+42	; 0x2a
    21fc:	88 2f       	mov	r24, r24
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9e 01       	movw	r18, r28
    2202:	2c 5d       	subi	r18, 0xDC	; 220
    2204:	3f 4f       	sbci	r19, 0xFF	; 255
    2206:	b9 01       	movw	r22, r18
    2208:	46 e0       	ldi	r20, 0x06	; 6
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	0e 94 30 06 	call	0xc60	; 0xc60 <EEPROM_readString>
		passLcdDialoag(pass1,dialogue,PASSWORD_SIZE);
    2210:	ce 01       	movw	r24, r28
    2212:	4e 96       	adiw	r24, 0x1e	; 30
    2214:	2b a5       	ldd	r18, Y+43	; 0x2b
    2216:	3c a5       	ldd	r19, Y+44	; 0x2c
    2218:	b9 01       	movw	r22, r18
    221a:	45 e0       	ldi	r20, 0x05	; 5
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <passLcdDialoag>
		if(!strcmp(pass1,pass2))
    2222:	ce 01       	movw	r24, r28
    2224:	4e 96       	adiw	r24, 0x1e	; 30
    2226:	9e 01       	movw	r18, r28
    2228:	2c 5d       	subi	r18, 0xDC	; 220
    222a:	3f 4f       	sbci	r19, 0xFF	; 255
    222c:	b9 01       	movw	r22, r18
    222e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <strcmp>
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	49 f4       	brne	.+18     	; 0x2248 <checkPass+0x16a>
		{
			EEPROM_writeByte(TRIES_FLAG_ADRR,0);
    2236:	80 e4       	ldi	r24, 0x40	; 64
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
			return 1;
    2242:	21 e0       	ldi	r18, 0x01	; 1
    2244:	2d a7       	std	Y+45, r18	; 0x2d
    2246:	90 c0       	rjmp	.+288    	; 0x2368 <checkPass+0x28a>
		}
		else
		{
			LCD_sendCommand(CLR_SCREEN);
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
			LCD_displayString("wrong pass");
    224e:	82 ea       	ldi	r24, 0xA2	; 162
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
			LCD_displayCharacter('0'+NUM_OF_TRIES-i-1);
    225e:	92 e3       	ldi	r25, 0x32	; 50
    2260:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2262:	29 2f       	mov	r18, r25
    2264:	28 1b       	sub	r18, r24
    2266:	82 2f       	mov	r24, r18
    2268:	0e 94 43 07 	call	0xe86	; 0xe86 <LCD_displayCharacter>
			LCD_displayString(" tries left");
    226c:	8d ea       	ldi	r24, 0xAD	; 173
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	aa ef       	ldi	r26, 0xFA	; 250
    227a:	b3 e4       	ldi	r27, 0x43	; 67
    227c:	8b 87       	std	Y+11, r24	; 0x0b
    227e:	9c 87       	std	Y+12, r25	; 0x0c
    2280:	ad 87       	std	Y+13, r26	; 0x0d
    2282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	6b 85       	ldd	r22, Y+11	; 0x0b
    2286:	7c 85       	ldd	r23, Y+12	; 0x0c
    2288:	8d 85       	ldd	r24, Y+13	; 0x0d
    228a:	9e 85       	ldd	r25, Y+14	; 0x0e
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a e7       	ldi	r20, 0x7A	; 122
    2292:	53 e4       	ldi	r21, 0x43	; 67
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8f 83       	std	Y+7, r24	; 0x07
    229e:	98 87       	std	Y+8, r25	; 0x08
    22a0:	a9 87       	std	Y+9, r26	; 0x09
    22a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <checkPass+0x1e8>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	3f c0       	rjmp	.+126    	; 0x2344 <checkPass+0x266>
	else if (__tmp > 65535)
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	4c f5       	brge	.+82     	; 0x2330 <checkPass+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22de:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <checkPass+0x248>
    2308:	89 e1       	ldi	r24, 0x19	; 25
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9c 83       	std	Y+4, r25	; 0x04
    230e:	8b 83       	std	Y+3, r24	; 0x03
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	9c 81       	ldd	r25, Y+4	; 0x04
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <checkPass+0x236>
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	69 f7       	brne	.-38     	; 0x2308 <checkPass+0x22a>
    232e:	14 c0       	rjmp	.+40     	; 0x2358 <checkPass+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	9a 83       	std	Y+2, r25	; 0x02
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <checkPass+0x272>
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01

char checkPass(uint8 eepromadrr,char* dialogue)
{
	_delay_ms(250);
	uint8 i;
	for(i=EEPROM_readByte(TRIES_FLAG_ADRR);i<NUM_OF_TRIES;i++)
    2358:	8d 8d       	ldd	r24, Y+29	; 0x1d
    235a:	8f 5f       	subi	r24, 0xFF	; 255
    235c:	8d 8f       	std	Y+29, r24	; 0x1d
    235e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2360:	83 30       	cpi	r24, 0x03	; 3
    2362:	08 f4       	brcc	.+2      	; 0x2366 <checkPass+0x288>
    2364:	41 cf       	rjmp	.-382    	; 0x21e8 <checkPass+0x10a>


		}

	}
	return 0;
    2366:	1d a6       	std	Y+45, r1	; 0x2d
    2368:	8d a5       	ldd	r24, Y+45	; 0x2d
}
    236a:	ad 96       	adiw	r28, 0x2d	; 45
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <changepass>:

void changepass(char*dialoge1,char*dialoge2,uint8 eepromadrr)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	ad 97       	sbiw	r28, 0x2d	; 45
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	9a a7       	std	Y+42, r25	; 0x2a
    2392:	89 a7       	std	Y+41, r24	; 0x29
    2394:	7c a7       	std	Y+44, r23	; 0x2c
    2396:	6b a7       	std	Y+43, r22	; 0x2b
    2398:	4d a7       	std	Y+45, r20	; 0x2d
	while(1)
	{
	uint8 adminpass1[PASSWORD_SIZE+1],adminpass2[PASSWORD_SIZE+1];
	adminpass1[PASSWORD_SIZE]='\0';
    239a:	1a a2       	std	Y+34, r1	; 0x22
	adminpass2[PASSWORD_SIZE]='\0';
    239c:	18 a6       	std	Y+40, r1	; 0x28
	 passLcdDialoag(adminpass1,dialoge1,PASSWORD_SIZE);
    239e:	ce 01       	movw	r24, r28
    23a0:	4d 96       	adiw	r24, 0x1d	; 29
    23a2:	29 a5       	ldd	r18, Y+41	; 0x29
    23a4:	3a a5       	ldd	r19, Y+42	; 0x2a
    23a6:	b9 01       	movw	r22, r18
    23a8:	45 e0       	ldi	r20, 0x05	; 5
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <passLcdDialoag>
	 passLcdDialoag(adminpass2,dialoge2,PASSWORD_SIZE);
    23b0:	ce 01       	movw	r24, r28
    23b2:	83 96       	adiw	r24, 0x23	; 35
    23b4:	2b a5       	ldd	r18, Y+43	; 0x2b
    23b6:	3c a5       	ldd	r19, Y+44	; 0x2c
    23b8:	b9 01       	movw	r22, r18
    23ba:	45 e0       	ldi	r20, 0x05	; 5
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <passLcdDialoag>
	 if(!strcmp(adminpass1,adminpass2))
    23c2:	ce 01       	movw	r24, r28
    23c4:	4d 96       	adiw	r24, 0x1d	; 29
    23c6:	9e 01       	movw	r18, r28
    23c8:	2d 5d       	subi	r18, 0xDD	; 221
    23ca:	3f 4f       	sbci	r19, 0xFF	; 255
    23cc:	b9 01       	movw	r22, r18
    23ce:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <strcmp>
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <changepass+0x5c>
    23d6:	83 c0       	rjmp	.+262    	; 0x24de <changepass+0x162>
	 {
		 EEPROM_writeString(eepromadrr,adminpass1);
    23d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9e 01       	movw	r18, r28
    23e0:	23 5e       	subi	r18, 0xE3	; 227
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	b9 01       	movw	r22, r18
    23e6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <EEPROM_writeString>
		 LCD_sendCommand(CLR_SCREEN);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
		 LCD_displayString("SUCCESS ....");
    23f0:	89 eb       	ldi	r24, 0xB9	; 185
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a8 ec       	ldi	r26, 0xC8	; 200
    23fe:	b3 e4       	ldi	r27, 0x43	; 67
    2400:	89 8f       	std	Y+25, r24	; 0x19
    2402:	9a 8f       	std	Y+26, r25	; 0x1a
    2404:	ab 8f       	std	Y+27, r26	; 0x1b
    2406:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	69 8d       	ldd	r22, Y+25	; 0x19
    240a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a e7       	ldi	r20, 0x7A	; 122
    2416:	53 e4       	ldi	r21, 0x43	; 67
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	8d 8b       	std	Y+21, r24	; 0x15
    2422:	9e 8b       	std	Y+22, r25	; 0x16
    2424:	af 8b       	std	Y+23, r26	; 0x17
    2426:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2428:	6d 89       	ldd	r22, Y+21	; 0x15
    242a:	7e 89       	ldd	r23, Y+22	; 0x16
    242c:	8f 89       	ldd	r24, Y+23	; 0x17
    242e:	98 8d       	ldd	r25, Y+24	; 0x18
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	5f e3       	ldi	r21, 0x3F	; 63
    2438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	2c f4       	brge	.+10     	; 0x244a <changepass+0xce>
		__ticks = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9c 8b       	std	Y+20, r25	; 0x14
    2446:	8b 8b       	std	Y+19, r24	; 0x13
    2448:	3f c0       	rjmp	.+126    	; 0x24c8 <changepass+0x14c>
	else if (__tmp > 65535)
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	4f e7       	ldi	r20, 0x7F	; 127
    2458:	57 e4       	ldi	r21, 0x47	; 71
    245a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245e:	18 16       	cp	r1, r24
    2460:	4c f5       	brge	.+82     	; 0x24b4 <changepass+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2462:	69 8d       	ldd	r22, Y+25	; 0x19
    2464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e2       	ldi	r20, 0x20	; 32
    2470:	51 e4       	ldi	r21, 0x41	; 65
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
    248a:	0f c0       	rjmp	.+30     	; 0x24aa <changepass+0x12e>
    248c:	89 e1       	ldi	r24, 0x19	; 25
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9a 8b       	std	Y+18, r25	; 0x12
    2492:	89 8b       	std	Y+17, r24	; 0x11
    2494:	89 89       	ldd	r24, Y+17	; 0x11
    2496:	9a 89       	ldd	r25, Y+18	; 0x12
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <changepass+0x11c>
    249c:	9a 8b       	std	Y+18, r25	; 0x12
    249e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a0:	8b 89       	ldd	r24, Y+19	; 0x13
    24a2:	9c 89       	ldd	r25, Y+20	; 0x14
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	9c 8b       	std	Y+20, r25	; 0x14
    24a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24aa:	8b 89       	ldd	r24, Y+19	; 0x13
    24ac:	9c 89       	ldd	r25, Y+20	; 0x14
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	69 f7       	brne	.-38     	; 0x248c <changepass+0x110>
    24b2:	8f c0       	rjmp	.+286    	; 0x25d2 <changepass+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b4:	6d 89       	ldd	r22, Y+21	; 0x15
    24b6:	7e 89       	ldd	r23, Y+22	; 0x16
    24b8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ba:	98 8d       	ldd	r25, Y+24	; 0x18
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
    24c8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ca:	9c 89       	ldd	r25, Y+20	; 0x14
    24cc:	98 8b       	std	Y+16, r25	; 0x10
    24ce:	8f 87       	std	Y+15, r24	; 0x0f
    24d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d2:	98 89       	ldd	r25, Y+16	; 0x10
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <changepass+0x158>
    24d8:	98 8b       	std	Y+16, r25	; 0x10
    24da:	8f 87       	std	Y+15, r24	; 0x0f
    24dc:	7a c0       	rjmp	.+244    	; 0x25d2 <changepass+0x256>
		 _delay_ms(400);
		 break;
	 }else
	 {
		 LCD_sendCommand(CLR_SCREEN);
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
		 LCD_displayString("Failed try again....");
    24e4:	86 ec       	ldi	r24, 0xC6	; 198
    24e6:	91 e0       	ldi	r25, 0x01	; 1
    24e8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	aa ef       	ldi	r26, 0xFA	; 250
    24f2:	b3 e4       	ldi	r27, 0x43	; 67
    24f4:	8b 87       	std	Y+11, r24	; 0x0b
    24f6:	9c 87       	std	Y+12, r25	; 0x0c
    24f8:	ad 87       	std	Y+13, r26	; 0x0d
    24fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2500:	8d 85       	ldd	r24, Y+13	; 0x0d
    2502:	9e 85       	ldd	r25, Y+14	; 0x0e
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a e7       	ldi	r20, 0x7A	; 122
    250a:	53 e4       	ldi	r21, 0x43	; 67
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	8f 83       	std	Y+7, r24	; 0x07
    2516:	98 87       	std	Y+8, r25	; 0x08
    2518:	a9 87       	std	Y+9, r26	; 0x09
    251a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    251c:	6f 81       	ldd	r22, Y+7	; 0x07
    251e:	78 85       	ldd	r23, Y+8	; 0x08
    2520:	89 85       	ldd	r24, Y+9	; 0x09
    2522:	9a 85       	ldd	r25, Y+10	; 0x0a
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2530:	88 23       	and	r24, r24
    2532:	2c f4       	brge	.+10     	; 0x253e <changepass+0x1c2>
		__ticks = 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9e 83       	std	Y+6, r25	; 0x06
    253a:	8d 83       	std	Y+5, r24	; 0x05
    253c:	3f c0       	rjmp	.+126    	; 0x25bc <changepass+0x240>
	else if (__tmp > 65535)
    253e:	6f 81       	ldd	r22, Y+7	; 0x07
    2540:	78 85       	ldd	r23, Y+8	; 0x08
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	4c f5       	brge	.+82     	; 0x25a8 <changepass+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	6b 85       	ldd	r22, Y+11	; 0x0b
    2558:	7c 85       	ldd	r23, Y+12	; 0x0c
    255a:	8d 85       	ldd	r24, Y+13	; 0x0d
    255c:	9e 85       	ldd	r25, Y+14	; 0x0e
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
    257e:	0f c0       	rjmp	.+30     	; 0x259e <changepass+0x222>
    2580:	89 e1       	ldi	r24, 0x19	; 25
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	8b 83       	std	Y+3, r24	; 0x03
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <changepass+0x210>
    2590:	9c 83       	std	Y+4, r25	; 0x04
    2592:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	9e 81       	ldd	r25, Y+6	; 0x06
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	69 f7       	brne	.-38     	; 0x2580 <changepass+0x204>
    25a6:	f9 ce       	rjmp	.-526    	; 0x239a <changepass+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	6f 81       	ldd	r22, Y+7	; 0x07
    25aa:	78 85       	ldd	r23, Y+8	; 0x08
    25ac:	89 85       	ldd	r24, Y+9	; 0x09
    25ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	8d 81       	ldd	r24, Y+5	; 0x05
    25be:	9e 81       	ldd	r25, Y+6	; 0x06
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 83       	std	Y+1, r24	; 0x01
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <changepass+0x24c>
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	e4 ce       	rjmp	.-568    	; 0x239a <changepass+0x1e>
		 _delay_ms(500);
	 }
	}
}
    25d2:	ad 96       	adiw	r28, 0x2d	; 45
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <passLcdDialoag>:

void passLcdDialoag(uint8 pass[],char*dialoge,uint8 size)
{
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	64 97       	sbiw	r28, 0x14	; 20
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	99 8b       	std	Y+17, r25	; 0x11
    25fe:	88 8b       	std	Y+16, r24	; 0x10
    2600:	7b 8b       	std	Y+19, r23	; 0x13
    2602:	6a 8b       	std	Y+18, r22	; 0x12
    2604:	4c 8b       	std	Y+20, r20	; 0x14
	LCD_sendCommand(CLR_SCREEN);
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
	LCD_displayString(dialoge);
    260c:	8a 89       	ldd	r24, Y+18	; 0x12
    260e:	9b 89       	ldd	r25, Y+19	; 0x13
    2610:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
	for(uint8 i=0;i<size;i++)
    261c:	1f 86       	std	Y+15, r1	; 0x0f
    261e:	92 c0       	rjmp	.+292    	; 0x2744 <passLcdDialoag+0x160>
	{
		pass[i]=keypad_getPressedKey();
    2620:	8f 85       	ldd	r24, Y+15	; 0x0f
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	88 89       	ldd	r24, Y+16	; 0x10
    2628:	99 89       	ldd	r25, Y+17	; 0x11
    262a:	8c 01       	movw	r16, r24
    262c:	02 0f       	add	r16, r18
    262e:	13 1f       	adc	r17, r19
    2630:	0e 94 d5 08 	call	0x11aa	; 0x11aa <keypad_getPressedKey>
    2634:	f8 01       	movw	r30, r16
    2636:	80 83       	st	Z, r24
		LCD_displayCharacter(pass[i]);
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	88 89       	ldd	r24, Y+16	; 0x10
    2640:	99 89       	ldd	r25, Y+17	; 0x11
    2642:	fc 01       	movw	r30, r24
    2644:	e2 0f       	add	r30, r18
    2646:	f3 1f       	adc	r31, r19
    2648:	80 81       	ld	r24, Z
    264a:	0e 94 43 07 	call	0xe86	; 0xe86 <LCD_displayCharacter>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	aa e7       	ldi	r26, 0x7A	; 122
    2654:	b3 e4       	ldi	r27, 0x43	; 67
    2656:	8b 87       	std	Y+11, r24	; 0x0b
    2658:	9c 87       	std	Y+12, r25	; 0x0c
    265a:	ad 87       	std	Y+13, r26	; 0x0d
    265c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	53 e4       	ldi	r21, 0x43	; 67
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8f 83       	std	Y+7, r24	; 0x07
    2678:	98 87       	std	Y+8, r25	; 0x08
    267a:	a9 87       	std	Y+9, r26	; 0x09
    267c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <passLcdDialoag+0xbc>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	3f c0       	rjmp	.+126    	; 0x271e <passLcdDialoag+0x13a>
	else if (__tmp > 65535)
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <passLcdDialoag+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    26bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26be:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <passLcdDialoag+0x11c>
    26e2:	89 e1       	ldi	r24, 0x19	; 25
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <passLcdDialoag+0x10a>
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <passLcdDialoag+0xfe>
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <passLcdDialoag+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <passLcdDialoag+0x146>
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_sendCommand(MOVE_CURSOR_RIGHT);
    2732:	80 e1       	ldi	r24, 0x10	; 16
    2734:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
		LCD_displayCharacter('*');
    2738:	8a e2       	ldi	r24, 0x2A	; 42
    273a:	0e 94 43 07 	call	0xe86	; 0xe86 <LCD_displayCharacter>
void passLcdDialoag(uint8 pass[],char*dialoge,uint8 size)
{
	LCD_sendCommand(CLR_SCREEN);
	LCD_displayString(dialoge);
	LCD_goToRowColumn(1,0);
	for(uint8 i=0;i<size;i++)
    273e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2740:	8f 5f       	subi	r24, 0xFF	; 255
    2742:	8f 87       	std	Y+15, r24	; 0x0f
    2744:	9f 85       	ldd	r25, Y+15	; 0x0f
    2746:	8c 89       	ldd	r24, Y+20	; 0x14
    2748:	98 17       	cp	r25, r24
    274a:	08 f4       	brcc	.+2      	; 0x274e <passLcdDialoag+0x16a>
    274c:	69 cf       	rjmp	.-302    	; 0x2620 <passLcdDialoag+0x3c>
		_delay_ms(250);
		LCD_sendCommand(MOVE_CURSOR_RIGHT);
		LCD_displayCharacter('*');

	}
}
    274e:	64 96       	adiw	r28, 0x14	; 20
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	08 95       	ret

00002764 <firstStart_func>:

void firstStart_func()
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	2e 97       	sbiw	r28, 0x0e	; 14
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(CLR_SCREEN);
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCD_sendCommand>
	LCD_displayString("start first time");
    277e:	8b ed       	ldi	r24, 0xDB	; 219
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_goToRowColumn>
	LCD_displayString("Configuration");
    278e:	8c ee       	ldi	r24, 0xEC	; 236
    2790:	91 e0       	ldi	r25, 0x01	; 1
    2792:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_displayString>
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	aa ef       	ldi	r26, 0xFA	; 250
    279c:	b3 e4       	ldi	r27, 0x43	; 67
    279e:	8b 87       	std	Y+11, r24	; 0x0b
    27a0:	9c 87       	std	Y+12, r25	; 0x0c
    27a2:	ad 87       	std	Y+13, r26	; 0x0d
    27a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	4a e7       	ldi	r20, 0x7A	; 122
    27b4:	53 e4       	ldi	r21, 0x43	; 67
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	8f 83       	std	Y+7, r24	; 0x07
    27c0:	98 87       	std	Y+8, r25	; 0x08
    27c2:	a9 87       	std	Y+9, r26	; 0x09
    27c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c6:	6f 81       	ldd	r22, Y+7	; 0x07
    27c8:	78 85       	ldd	r23, Y+8	; 0x08
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	2c f4       	brge	.+10     	; 0x27e8 <firstStart_func+0x84>
		__ticks = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	3f c0       	rjmp	.+126    	; 0x2866 <firstStart_func+0x102>
	else if (__tmp > 65535)
    27e8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ea:	78 85       	ldd	r23, Y+8	; 0x08
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	4f e7       	ldi	r20, 0x7F	; 127
    27f6:	57 e4       	ldi	r21, 0x47	; 71
    27f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27fc:	18 16       	cp	r1, r24
    27fe:	4c f5       	brge	.+82     	; 0x2852 <firstStart_func+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2800:	6b 85       	ldd	r22, Y+11	; 0x0b
    2802:	7c 85       	ldd	r23, Y+12	; 0x0c
    2804:	8d 85       	ldd	r24, Y+13	; 0x0d
    2806:	9e 85       	ldd	r25, Y+14	; 0x0e
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	0f c0       	rjmp	.+30     	; 0x2848 <firstStart_func+0xe4>
    282a:	89 e1       	ldi	r24, 0x19	; 25
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	8b 83       	std	Y+3, r24	; 0x03
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <firstStart_func+0xd2>
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	8d 81       	ldd	r24, Y+5	; 0x05
    284a:	9e 81       	ldd	r25, Y+6	; 0x06
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	69 f7       	brne	.-38     	; 0x282a <firstStart_func+0xc6>
    2850:	14 c0       	rjmp	.+40     	; 0x287a <firstStart_func+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <firstStart_func+0x10e>
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	/*------SET NEW PASSWORDS----------------*/
	changepass("New Admin pass","reEnt Admin pass",ADMINADRR);
    287a:	8a ef       	ldi	r24, 0xFA	; 250
    287c:	91 e0       	ldi	r25, 0x01	; 1
    287e:	29 e0       	ldi	r18, 0x09	; 9
    2880:	32 e0       	ldi	r19, 0x02	; 2
    2882:	b9 01       	movw	r22, r18
    2884:	40 e1       	ldi	r20, 0x10	; 16
    2886:	0e 94 be 11 	call	0x237c	; 0x237c <changepass>
	changepass("New guest pass","reEnt guest pass",GUESTADRR);
    288a:	8a e1       	ldi	r24, 0x1A	; 26
    288c:	92 e0       	ldi	r25, 0x02	; 2
    288e:	29 e2       	ldi	r18, 0x29	; 41
    2890:	32 e0       	ldi	r19, 0x02	; 2
    2892:	b9 01       	movw	r22, r18
    2894:	40 e2       	ldi	r20, 0x20	; 32
    2896:	0e 94 be 11 	call	0x237c	; 0x237c <changepass>
	/*------------------------------------------------*/
	/*-----------CLEAR EEPROM FLAGS ON FIRST START-----------*/
			EEPROM_writeByte(FIRSTSTARTADD,0);
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
			EEPROM_writeByte(TRIES_FLAG_ADRR,0);
    28a6:	80 e4       	ldi	r24, 0x40	; 64
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	70 e0       	ldi	r23, 0x00	; 0
    28ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
			EEPROM_writeString(COMM_STR_ADDR,"0000000#");
    28b2:	2a e3       	ldi	r18, 0x3A	; 58
    28b4:	32 e0       	ldi	r19, 0x02	; 2
    28b6:	80 e5       	ldi	r24, 0x50	; 80
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	b9 01       	movw	r22, r18
    28bc:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <EEPROM_writeString>
			EEPROM_writeByte(COMM_STR_ADDR+COMM_STR_AIRCOND_VALUE_POS,AIR_COND_DEFUALT_VALUE+'0');
    28c0:	86 e5       	ldi	r24, 0x56	; 86
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	6e e4       	ldi	r22, 0x4E	; 78
    28c6:	70 e0       	ldi	r23, 0x00	; 0
    28c8:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
	/*-------------------------------------------------------------*/
}
    28cc:	2e 96       	adiw	r28, 0x0e	; 14
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <SPI_initMaster>:
 *      Author: Mostafa
 */

#include"spi.h"
void SPI_initMaster()
{
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62

DDRB|=0b10110000; //set sck and mosi and ss to output
    28e6:	a7 e3       	ldi	r26, 0x37	; 55
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e7 e3       	ldi	r30, 0x37	; 55
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	80 6b       	ori	r24, 0xB0	; 176
    28f2:	8c 93       	st	X, r24
CLR_BIT(DDRB,6);//set miso as input
    28f4:	a7 e3       	ldi	r26, 0x37	; 55
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e7 e3       	ldi	r30, 0x37	; 55
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	8f 7b       	andi	r24, 0xBF	; 191
    2900:	8c 93       	st	X, r24
SET_BIT(SPCR,MSTR); // set device as master
    2902:	ad e2       	ldi	r26, 0x2D	; 45
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	ed e2       	ldi	r30, 0x2D	; 45
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	80 61       	ori	r24, 0x10	; 16
    290e:	8c 93       	st	X, r24
SET_BIT(SPCR,SPE); //spi enable
    2910:	ad e2       	ldi	r26, 0x2D	; 45
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	ed e2       	ldi	r30, 0x2D	; 45
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	80 64       	ori	r24, 0x40	; 64
    291c:	8c 93       	st	X, r24
CLR_BIT(SPCR,CPOL);
    291e:	ad e2       	ldi	r26, 0x2D	; 45
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	ed e2       	ldi	r30, 0x2D	; 45
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	87 7f       	andi	r24, 0xF7	; 247
    292a:	8c 93       	st	X, r24
CLR_BIT(SPCR,CPHA);
    292c:	ad e2       	ldi	r26, 0x2D	; 45
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	ed e2       	ldi	r30, 0x2D	; 45
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	8b 7f       	andi	r24, 0xFB	; 251
    2938:	8c 93       	st	X, r24

/*********** clock frequency fosc/4
 ***********SPI2X=0 SPR1=0 SPR0 =0
 */

}
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <SPI_initSlave>:
void SPI_initSlave()
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(DDRB,6); //set miso to output
    2948:	a7 e3       	ldi	r26, 0x37	; 55
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e7 e3       	ldi	r30, 0x37	; 55
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	80 64       	ori	r24, 0x40	; 64
    2954:	8c 93       	st	X, r24
	DDRB&=~(0b10110000); //set sck and mosi and ss to input
    2956:	a7 e3       	ldi	r26, 0x37	; 55
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e7 e3       	ldi	r30, 0x37	; 55
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	8f 74       	andi	r24, 0x4F	; 79
    2962:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPE); //spi enable
    2964:	ad e2       	ldi	r26, 0x2D	; 45
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	ed e2       	ldi	r30, 0x2D	; 45
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	80 64       	ori	r24, 0x40	; 64
    2970:	8c 93       	st	X, r24
	CLR_BIT(SPCR,MSTR); // set device as slave
    2972:	ad e2       	ldi	r26, 0x2D	; 45
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	ed e2       	ldi	r30, 0x2D	; 45
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	8f 7e       	andi	r24, 0xEF	; 239
    297e:	8c 93       	st	X, r24
	/*********** clock frequency fosc/4
	 ***********SPI2X=0 SPR1=0 SPR0 =0
	 */
	CLR_BIT(SPCR,CPOL);
    2980:	ad e2       	ldi	r26, 0x2D	; 45
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	ed e2       	ldi	r30, 0x2D	; 45
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	87 7f       	andi	r24, 0xF7	; 247
    298c:	8c 93       	st	X, r24
	CLR_BIT(SPCR,CPHA);
    298e:	ad e2       	ldi	r26, 0x2D	; 45
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	ed e2       	ldi	r30, 0x2D	; 45
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	8b 7f       	andi	r24, 0xFB	; 251
    299a:	8c 93       	st	X, r24
}
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <SPI_sendByte>:
void SPI_sendByte(char data)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	0f 92       	push	r0
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	89 83       	std	Y+1, r24	; 0x01
SPDR=data;
    29ae:	ef e2       	ldi	r30, 0x2F	; 47
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	80 83       	st	Z, r24
while(BIT_IS_CLR(SPSR,SPIF)){}
    29b6:	ee e2       	ldi	r30, 0x2E	; 46
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	88 23       	and	r24, r24
    29be:	dc f7       	brge	.-10     	; 0x29b6 <SPI_sendByte+0x14>
}
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <SPI_receiveByte>:
char SPI_receiveByte()
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLR(SPSR,SPIF)){}
    29d0:	ee e2       	ldi	r30, 0x2E	; 46
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	88 23       	and	r24, r24
    29d8:	dc f7       	brge	.-10     	; 0x29d0 <SPI_receiveByte+0x8>
	return SPDR;
    29da:	ef e2       	ldi	r30, 0x2F	; 47
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
}
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <SPI_sendString>:
void SPI_sendString(char* string)
{
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <SPI_sendString+0x6>
    29ec:	0f 92       	push	r0
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	9b 83       	std	Y+3, r25	; 0x03
    29f4:	8a 83       	std	Y+2, r24	; 0x02
uint8 i=0;
    29f6:	19 82       	std	Y+1, r1	; 0x01
    29f8:	0e c0       	rjmp	.+28     	; 0x2a16 <SPI_sendString+0x30>
while(string[i]!='\0')
{
	SPI_sendByte(string[i]);
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	9b 81       	ldd	r25, Y+3	; 0x03
    2a04:	fc 01       	movw	r30, r24
    2a06:	e2 0f       	add	r30, r18
    2a08:	f3 1f       	adc	r31, r19
    2a0a:	80 81       	ld	r24, Z
    2a0c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <SPI_sendByte>
	i++;
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	8f 5f       	subi	r24, 0xFF	; 255
    2a14:	89 83       	std	Y+1, r24	; 0x01
	return SPDR;
}
void SPI_sendString(char* string)
{
uint8 i=0;
while(string[i]!='\0')
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	28 2f       	mov	r18, r24
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a20:	fc 01       	movw	r30, r24
    2a22:	e2 0f       	add	r30, r18
    2a24:	f3 1f       	adc	r31, r19
    2a26:	80 81       	ld	r24, Z
    2a28:	88 23       	and	r24, r24
    2a2a:	39 f7       	brne	.-50     	; 0x29fa <SPI_sendString+0x14>
{
	SPI_sendByte(string[i]);
	i++;
}
}
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <SPI_receiveString>:
void SPI_receiveString(char* string)
{
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <SPI_receiveString+0xa>
    2a42:	0f 92       	push	r0
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	9b 83       	std	Y+3, r25	; 0x03
    2a4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    2a4c:	19 82       	std	Y+1, r1	; 0x01
	string[i]=SPI_receiveByte();
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	8a 81       	ldd	r24, Y+2	; 0x02
    2a56:	9b 81       	ldd	r25, Y+3	; 0x03
    2a58:	8c 01       	movw	r16, r24
    2a5a:	02 0f       	add	r16, r18
    2a5c:	13 1f       	adc	r17, r19
    2a5e:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <SPI_receiveByte>
    2a62:	f8 01       	movw	r30, r16
    2a64:	80 83       	st	Z, r24
    2a66:	0f c0       	rjmp	.+30     	; 0x2a86 <SPI_receiveString+0x4e>
	while(string[i]!='#')
	{
		i++;
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	8f 5f       	subi	r24, 0xFF	; 255
    2a6c:	89 83       	std	Y+1, r24	; 0x01
		string[i]=SPI_receiveByte();
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	9b 81       	ldd	r25, Y+3	; 0x03
    2a78:	8c 01       	movw	r16, r24
    2a7a:	02 0f       	add	r16, r18
    2a7c:	13 1f       	adc	r17, r19
    2a7e:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <SPI_receiveByte>
    2a82:	f8 01       	movw	r30, r16
    2a84:	80 83       	st	Z, r24
}
void SPI_receiveString(char* string)
{
	uint8 i =0;
	string[i]=SPI_receiveByte();
	while(string[i]!='#')
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	28 2f       	mov	r18, r24
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a90:	fc 01       	movw	r30, r24
    2a92:	e2 0f       	add	r30, r18
    2a94:	f3 1f       	adc	r31, r19
    2a96:	80 81       	ld	r24, Z
    2a98:	83 32       	cpi	r24, 0x23	; 35
    2a9a:	31 f7       	brne	.-52     	; 0x2a68 <SPI_receiveString+0x30>
	{
		i++;
		string[i]=SPI_receiveByte();
	}
	string[i]='\0';
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e2 0f       	add	r30, r18
    2aaa:	f3 1f       	adc	r31, r19
    2aac:	10 82       	st	Z, r1
}
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	08 95       	ret

00002abe <__udivmodqi4>:
    2abe:	99 1b       	sub	r25, r25
    2ac0:	79 e0       	ldi	r23, 0x09	; 9
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <__udivmodqi4_ep>

00002ac4 <__udivmodqi4_loop>:
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	96 17       	cp	r25, r22
    2ac8:	08 f0       	brcs	.+2      	; 0x2acc <__udivmodqi4_ep>
    2aca:	96 1b       	sub	r25, r22

00002acc <__udivmodqi4_ep>:
    2acc:	88 1f       	adc	r24, r24
    2ace:	7a 95       	dec	r23
    2ad0:	c9 f7       	brne	.-14     	; 0x2ac4 <__udivmodqi4_loop>
    2ad2:	80 95       	com	r24
    2ad4:	08 95       	ret

00002ad6 <__divmodsi4>:
    2ad6:	97 fb       	bst	r25, 7
    2ad8:	09 2e       	mov	r0, r25
    2ada:	05 26       	eor	r0, r21
    2adc:	0e d0       	rcall	.+28     	; 0x2afa <__divmodsi4_neg1>
    2ade:	57 fd       	sbrc	r21, 7
    2ae0:	04 d0       	rcall	.+8      	; 0x2aea <__divmodsi4_neg2>
    2ae2:	14 d0       	rcall	.+40     	; 0x2b0c <__udivmodsi4>
    2ae4:	0a d0       	rcall	.+20     	; 0x2afa <__divmodsi4_neg1>
    2ae6:	00 1c       	adc	r0, r0
    2ae8:	38 f4       	brcc	.+14     	; 0x2af8 <__divmodsi4_exit>

00002aea <__divmodsi4_neg2>:
    2aea:	50 95       	com	r21
    2aec:	40 95       	com	r20
    2aee:	30 95       	com	r19
    2af0:	21 95       	neg	r18
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	4f 4f       	sbci	r20, 0xFF	; 255
    2af6:	5f 4f       	sbci	r21, 0xFF	; 255

00002af8 <__divmodsi4_exit>:
    2af8:	08 95       	ret

00002afa <__divmodsi4_neg1>:
    2afa:	f6 f7       	brtc	.-4      	; 0x2af8 <__divmodsi4_exit>
    2afc:	90 95       	com	r25
    2afe:	80 95       	com	r24
    2b00:	70 95       	com	r23
    2b02:	61 95       	neg	r22
    2b04:	7f 4f       	sbci	r23, 0xFF	; 255
    2b06:	8f 4f       	sbci	r24, 0xFF	; 255
    2b08:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0a:	08 95       	ret

00002b0c <__udivmodsi4>:
    2b0c:	a1 e2       	ldi	r26, 0x21	; 33
    2b0e:	1a 2e       	mov	r1, r26
    2b10:	aa 1b       	sub	r26, r26
    2b12:	bb 1b       	sub	r27, r27
    2b14:	fd 01       	movw	r30, r26
    2b16:	0d c0       	rjmp	.+26     	; 0x2b32 <__udivmodsi4_ep>

00002b18 <__udivmodsi4_loop>:
    2b18:	aa 1f       	adc	r26, r26
    2b1a:	bb 1f       	adc	r27, r27
    2b1c:	ee 1f       	adc	r30, r30
    2b1e:	ff 1f       	adc	r31, r31
    2b20:	a2 17       	cp	r26, r18
    2b22:	b3 07       	cpc	r27, r19
    2b24:	e4 07       	cpc	r30, r20
    2b26:	f5 07       	cpc	r31, r21
    2b28:	20 f0       	brcs	.+8      	; 0x2b32 <__udivmodsi4_ep>
    2b2a:	a2 1b       	sub	r26, r18
    2b2c:	b3 0b       	sbc	r27, r19
    2b2e:	e4 0b       	sbc	r30, r20
    2b30:	f5 0b       	sbc	r31, r21

00002b32 <__udivmodsi4_ep>:
    2b32:	66 1f       	adc	r22, r22
    2b34:	77 1f       	adc	r23, r23
    2b36:	88 1f       	adc	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	1a 94       	dec	r1
    2b3c:	69 f7       	brne	.-38     	; 0x2b18 <__udivmodsi4_loop>
    2b3e:	60 95       	com	r22
    2b40:	70 95       	com	r23
    2b42:	80 95       	com	r24
    2b44:	90 95       	com	r25
    2b46:	9b 01       	movw	r18, r22
    2b48:	ac 01       	movw	r20, r24
    2b4a:	bd 01       	movw	r22, r26
    2b4c:	cf 01       	movw	r24, r30
    2b4e:	08 95       	ret

00002b50 <__prologue_saves__>:
    2b50:	2f 92       	push	r2
    2b52:	3f 92       	push	r3
    2b54:	4f 92       	push	r4
    2b56:	5f 92       	push	r5
    2b58:	6f 92       	push	r6
    2b5a:	7f 92       	push	r7
    2b5c:	8f 92       	push	r8
    2b5e:	9f 92       	push	r9
    2b60:	af 92       	push	r10
    2b62:	bf 92       	push	r11
    2b64:	cf 92       	push	r12
    2b66:	df 92       	push	r13
    2b68:	ef 92       	push	r14
    2b6a:	ff 92       	push	r15
    2b6c:	0f 93       	push	r16
    2b6e:	1f 93       	push	r17
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	ca 1b       	sub	r28, r26
    2b7a:	db 0b       	sbc	r29, r27
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	09 94       	ijmp

00002b88 <__epilogue_restores__>:
    2b88:	2a 88       	ldd	r2, Y+18	; 0x12
    2b8a:	39 88       	ldd	r3, Y+17	; 0x11
    2b8c:	48 88       	ldd	r4, Y+16	; 0x10
    2b8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b90:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b92:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b94:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b96:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b98:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b9a:	b9 84       	ldd	r11, Y+9	; 0x09
    2b9c:	c8 84       	ldd	r12, Y+8	; 0x08
    2b9e:	df 80       	ldd	r13, Y+7	; 0x07
    2ba0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ba2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ba4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ba6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ba8:	aa 81       	ldd	r26, Y+2	; 0x02
    2baa:	b9 81       	ldd	r27, Y+1	; 0x01
    2bac:	ce 0f       	add	r28, r30
    2bae:	d1 1d       	adc	r29, r1
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	ed 01       	movw	r28, r26
    2bbc:	08 95       	ret

00002bbe <memcpy>:
    2bbe:	fb 01       	movw	r30, r22
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <memcpy+0xa>
    2bc4:	01 90       	ld	r0, Z+
    2bc6:	0d 92       	st	X+, r0
    2bc8:	41 50       	subi	r20, 0x01	; 1
    2bca:	50 40       	sbci	r21, 0x00	; 0
    2bcc:	d8 f7       	brcc	.-10     	; 0x2bc4 <memcpy+0x6>
    2bce:	08 95       	ret

00002bd0 <strcat>:
    2bd0:	fb 01       	movw	r30, r22
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	0d 90       	ld	r0, X+
    2bd6:	00 20       	and	r0, r0
    2bd8:	e9 f7       	brne	.-6      	; 0x2bd4 <strcat+0x4>
    2bda:	11 97       	sbiw	r26, 0x01	; 1
    2bdc:	01 90       	ld	r0, Z+
    2bde:	0d 92       	st	X+, r0
    2be0:	00 20       	and	r0, r0
    2be2:	e1 f7       	brne	.-8      	; 0x2bdc <strcat+0xc>
    2be4:	08 95       	ret

00002be6 <strcmp>:
    2be6:	fb 01       	movw	r30, r22
    2be8:	dc 01       	movw	r26, r24
    2bea:	8d 91       	ld	r24, X+
    2bec:	01 90       	ld	r0, Z+
    2bee:	80 19       	sub	r24, r0
    2bf0:	01 10       	cpse	r0, r1
    2bf2:	d9 f3       	breq	.-10     	; 0x2bea <strcmp+0x4>
    2bf4:	99 0b       	sbc	r25, r25
    2bf6:	08 95       	ret

00002bf8 <_exit>:
    2bf8:	f8 94       	cli

00002bfa <__stop_program>:
    2bfa:	ff cf       	rjmp	.-2      	; 0x2bfa <__stop_program>
